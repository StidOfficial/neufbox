#!/bin/sh
##########################################
#
# Author Olivier GENRE : olivier.genre@efixo.com
#
##########################################

logger -s -t rc.qos -p daemon.info "== $0 $* =="

TC=tc

PPP_IFACE=`status get ppp_ifname`
HOTSPOT_IFACE=`nvram get hotspot_iface`
HOTSPOT_ACTIVE=`nvram get hotspot_active`
OPTION=`autoconf get option`

PHONE_MIN_UP="110"
PHONE_MAX_UP="128"

if [ "`status get net_infra`" = "adsl" ]
then
	MAX_UP=`dsl get adsl_rate_up`
	MAX_DOWN=`dsl get adsl_rate_down`
else
	MAX_UP=1280
	MAX_DOWN=20000
fi

if [ ! -z "$MAX_UP" ]
then
	# IP bw is 80% of ATM showtime
	MAX_UP_IP=$(( ($MAX_UP * 80) / 100 ))
	# FON bw is 30% of IP bw
	MAX_FON_UP=$((( $MAX_UP_IP * 30) / 100))
	MIN_FON_UP=$(( $MAX_FON_UP / 3 ))
	# min data bw is MAX_UP_IP - phone bw - fon bw
	MIN_UP=$(( $MAX_UP_IP - $MAX_FON_UP - $PHONE_MIN_UP))
	[ "$MIN_UP" -lt "10" ] && MIN_UP=10
	# max data bw when voice is on is MAX_UP_IP - phone bw
	MAX_DATA_WHEN_VOICE=$(( $MAX_UP_IP - $PHONE_MIN_UP ))
fi

if [ ! -z "$MAX_DOWN" ]
then
	# IP bw is 80% of ATM showtime
	MAX_DOWN=$(( ($MAX_DOWN * 80) / 100 ))
	# FON bw is 30% of IP bw
	MAX_FON_DOWN=$((( $MAX_DOWN * 30) / 100))
fi

init_qos () {

	[ "`status get net_infra`" != "adsl" ] && return 0


	if [ "$HOTSPOT_ACTIVE" = "on" ] || [ "$OPTION" = "3" ]
	then
		$TC qdisc add dev $PPP_IFACE handle 1: root htb default 20
		$TC class add dev $PPP_IFACE parent 1: classid 1:1 htb rate ${MAX_UP}kbit
		$TC class add dev $PPP_IFACE parent 1:1 classid 1:20 htb prio 2 rate ${MIN_UP}kbit ceil ${MAX_UP}kbit
		logger -s -t rc.qos -p daemon.info "== $0 $* [init_qos done] =="
	fi

}

deinit_qos () {

	$TC qdisc del dev $PPP_IFACE root

}

femtocell_start () {

	RAN_PORT=`nvram get femto_port`
	DATA_IFACE=`status get net_data_ifname`
	for RAN_GW in `nvram list_long femto_gateway`
	do
		iptables -t mangle -A FORWARD -o $DATA_IFACE -d $RAN_GW -p udp -m udp --dport $RAN_PORT -j MARK --set-mark 3
	done
	logger -s -t rc.qos -p daemon.info "== $0 $* [femtocell_start done] =="

}

femtocell_stop () {

	RAN_PORT=`nvram get femto_port`
	DATA_IFACE=`status get net_data_ifname`
	for RAN_GW in `nvram list_long femto_gateway`
	do
		iptables -t mangle -D FORWARD -o $DATA_IFACE -d $RAN_GW -p udp -m udp --dport $RAN_PORT -j MARK --set-mark 3
	done

}

o3 () {

	if [ "$OPTION" = "3" ]
      	then
		# Check if qos went deinit or was not yet init => init
		[ -z "`$TC -s class show dev $PPP_IFACE`" ] && init_qos
        	$TC class add dev $PPP_IFACE parent 1:1 classid 1:10 htb prio 1 rate ${PHONE_MIN_UP}kbit ceil ${MAX_UP}kbit

    		# Creating SFQ queue to assure a rigth bw sharing
    		$TC qdisc add dev $PPP_IFACE parent 1:10 handle 110: sfq perturb 10
		$TC qdisc add dev $PPP_IFACE parent 1:20 handle 120: sfq perturb 10

		# now filtering
		$TC filter add dev $PPP_IFACE protocol ip parent 1: prio 1 u32 match ip tos 0xB4 0xff flowid 1:10
		logger -s -t rc.qos -p daemon.info "== $0 $* [o3 done] =="
	fi

}

o3_voice_start () {
	if [ "$OPTION" = "3" ]
	then
		# Check if qos is not yet ready for option 3
		[ -z "`$TC filter show dev $PPP_IFACE|grep b4`" ] && o3
		$TC class del dev $PPP_IFACE parent 1:1 classid 1:20 htb prio 2 rate ${MIN_UP}kbit ceil ${MAX_UP}kbit
		$TC class add dev $PPP_IFACE parent 1:1 classid 1:20 htb prio 2 rate ${MAX_DATA_WHEN_VOICE}kbit ceil ${MAX_DATA_WHEN_VOICE}kbit
	fi
}

o3_voice_stop () {
	if [ "$OPTION" = "3" ]
	then
		$TC class del dev $PPP_IFACE parent 1:1 classid 1:20 htb prio 2 rate ${MAX_DATA_WHEN_VOICE}kbit ceil ${MAX_DATA_WHEN_VOICE}kbit
		$TC class add dev $PPP_IFACE parent 1:1 classid 1:20 htb prio 2 rate ${MIN_UP}kbit ceil ${MAX_UP}kbit
	fi
}

o3_stop () {

	if [ "$OPTION" = "3" ]
      	then
    		# Deleting SFQ queue to assure a rigth bw sharing
    		$TC qdisc del dev $PPP_IFACE parent 1:10 handle 110: sfq perturb 10
		$TC qdisc del dev $PPP_IFACE parent 1:20 handle 120: sfq perturb 10

		# Deleting filters
		$TC filter del dev $PPP_IFACE protocol ip parent 1: prio 1 u32 match ip tos 0xB4 0xff flowid 1:10

		# Deleting htb classes
		$TC class del dev $PPP_IFACE parent 1:1 classid 1:10 htb prio 1 rate ${PHONE_MIN_UP}kbit ceil ${MAX_UP}kbit
		logger -s -t rc.qos -p daemon.info "== $0 $* [o3_stop done] =="

	fi

}

fon () {

	if [ "$HOTSPOT_ACTIVE" = "on" ]
	then
		if [ "`status get net_infra`" = "adsl" ]
		then
			# Check if qos went deinit or was not yet init => init
			[ -z "`$TC -s class show dev $PPP_IFACE`" ] && init_qos
			$TC qdisc add dev $HOTSPOT_IFACE handle 1: root htb default 10
			$TC class add dev $HOTSPOT_IFACE parent 1:1 classid 1:10 htb prio 1 rate ${MAX_FON_DOWN}kbit

			$TC class add dev $PPP_IFACE parent 1:1 classid 1:30 htb rate ${PHONE_MIN_UP}kbit ceil ${PHONE_MAX_UP}kbit prio 1
			$TC class add dev $PPP_IFACE parent 1:1 classid 1:40 htb rate ${MIN_FON_UP}kbit ceil ${MAX_FON_UP}kbit prio 3

			# Creating SFQ queue to assure a rigth bw sharing
			$TC qdisc add dev $PPP_IFACE parent 1:30 handle 110: sfq perturb 10
			$TC qdisc add dev $PPP_IFACE parent 1:40 handle 120: sfq perturb 10

			# now filtering

			$TC filter add dev $PPP_IFACE protocol ip parent 1: prio 3 u32 match ip tos 0x1 0xff flowid 1:30
			$TC filter add dev $PPP_IFACE protocol ip parent 1: prio 2 u32 match ip tos 0x2 0xff flowid 1:40
		else
			$TC qdisc add dev $HOTSPOT_IFACE handle 1: root htb default 10
			$TC class add dev $HOTSPOT_IFACE parent 1:1 classid 1:10 htb prio 1 rate ${MAX_FON_DOWN}kbit
			$TC qdisc add dev $HOTSPOT_IFACE handle ffff: ingress
			$TC filter add dev $HOTSPOT_IFACE parent ffff: protocol ip prio 50 u32 match ip src 0.0.0.0/0 police rate ${MAX_FON_UP}kbit burst 50k drop flowid :1
		fi
		logger -s -t rc.qos -p daemon.info "== $0 $* [fon done] =="

	fi

}

fon_stop () {


		$TC qdisc del dev $HOTSPOT_IFACE root
		# Deleting SFQ queue to assure a rigth bw sharing
		$TC qdisc del dev $PPP_IFACE parent 1:30 handle 110: sfq perturb 10
		$TC qdisc del dev $PPP_IFACE parent 1:40 handle 120: sfq perturb 10

		# Deleting filters
		$TC filter del dev $PPP_IFACE protocol ip parent 1: prio 3 u32 match ip tos 0x01 0xff flowid 1:30
		$TC filter del dev $PPP_IFACE protocol ip parent 1: prio 2 u32 match ip tos 0x02 0xff flowid 1:40

		# Deleting htb classes
		$TC class del dev $PPP_IFACE parent 1:1 classid 1:30 htb rate ${PHONE_MIN_UP}kbit ceil ${PHONE_MAX_UP}kbit prio 1
		$TC class del dev $PPP_IFACE parent 1:1 classid 1:40 htb rate ${MIN_FON_UP}kbit ceil ${MAX_FON_UP}kbit prio 3

}

qosstatus () {

	$TC -s qdisc show dev $PPP_IFACE
	$TC -s class show dev $PPP_IFACE
	$TC -s filter show dev $PPP_IFACE

	$TC -s qdisc show dev $HOTSPOT_IFACE
	$TC -s class show dev $HOTSPOT_IFACE
	$TC -s filter show dev $HOTSPOT_IFACE

}


case "$1" in

init)
	init_qos
	exit 0
;;

deinit)
	deinit_qos
	exit 0
;;

o3)
	o3
	exit 0
;;

o3_voice_start)
	o3_voice_start
	exit 0
;;

o3_voice_stop)
	o3_voice_stop
	exit 0
;;

o3_stop)
	o3_stop
	exit 0
;;

fon)
	fon
	exit 0
;;

fon_stop)
	fon_stop
	exit 0
;;

qosstatus)
	qosstatus
	exit 0
;;

femto)
	femtocell_stop
	femtocell_start
	exit 0
;;

*)
	echo "Usage {init|deinit|o3|o3_voice_start|o3_voice_stop|o3_stop|fon|fon_stop|qosstatus|femto}"
	exit 1
;;

esac
