--- a/src/md5.c
+++ b/src/md5.c
@@ -17,17 +17,17 @@
 #include <string.h>		/* for memcpy() */
 #include "md5.h"
 
-void byteReverse(unsigned char *buf, unsigned longs);
+void byteReverse(unsigned char *buf, size_t longs);
 
 /*
  * Note: this code is harmless on little-endian machines.
  */
-void byteReverse(unsigned char *buf, unsigned longs)
+void byteReverse(unsigned char *buf, size_t longs)
 {
     uint32 t;
     do {
-	t = (uint32) ((unsigned) buf[3] << 8 | buf[2]) << 16 |
-	    ((unsigned) buf[1] << 8 | buf[0]);
+	t = (uint32) ((uint16) buf[3] << 8 | buf[2]) << 16 |
+	    ((uint16) buf[1] << 8 | buf[0]);
 	*(uint32 *) buf = t;
 	buf += 4;
     } while (--longs);
@@ -52,7 +52,7 @@ void MD5Init(struct MD5Context *ctx)
  * Update context to reflect the concatenation of another buffer full
  * of bytes.
  */
-void MD5Update(struct MD5Context *ctx, unsigned char const *buf, unsigned len)
+void MD5Update(struct MD5Context *ctx, unsigned char const *buf, size_t len)
 {
     uint32 t;
 
@@ -102,7 +102,7 @@ void MD5Update(struct MD5Context *ctx, u
  */
 void MD5Final(unsigned char digest[16], struct MD5Context *ctx)
 {
-    unsigned count;
+    size_t count;
     unsigned char *p;
 
     /* Compute number of bytes mod 64 */
--- a/src/md5.h
+++ b/src/md5.h
@@ -1,11 +1,8 @@
 #ifndef MD5_H
 #define MD5_H
 
-#ifdef __alpha
+typedef unsigned short uint16;
 typedef unsigned int uint32;
-#else
-typedef unsigned long uint32;
-#endif
 
 struct MD5Context {
 	uint32 buf[4];
@@ -15,7 +12,7 @@ struct MD5Context {
 
 void MD5Init(struct MD5Context *context);
 void MD5Update(struct MD5Context *context, unsigned char const *buf,
-	       unsigned len);
+	       size_t len);
 void MD5Final(unsigned char digest[16], struct MD5Context *context);
 void MD5Transform(uint32 buf[4], uint32 const in[16]);
 
--- a/src/radius.h
+++ b/src/radius.h
@@ -218,6 +218,8 @@ struct radius_packet_t {
 } __attribute__((packed));
 
 
+/* Bug fix here, we replace all pointers declared as int
+   by long */
 struct radius_queue_t {      /* Holder for queued packets */
   int state;                 /* 0=empty, 1=full */
   void *cbp;                 /* Pointer used for callbacks */
@@ -230,9 +232,9 @@ struct radius_queue_t {      /* Holder f
   uint8_t type;             /* The type of packet */
   int l;                     /* Length of the packet */
   struct qmsg_t *seqnext;    /* Pointer to next in sequence hash list */
-  int next;                  /* Pointer to the next in queue. -1: Last */
-  int prev;                  /* Pointer to the previous in queue. -1: First */
-  int this;                  /* Pointer to myself */
+  long next;                  /* Pointer to the next in queue. -1: Last */
+  long prev;                  /* Pointer to the previous in queue. -1: First */
+  long this;                  /* Pointer to myself */
 };
 
 
--- a/src/dhcp.c
+++ b/src/dhcp.c
@@ -740,7 +740,7 @@ if (this->debug) printf("Sending IP pack
  * dhcp_hash()
  * Generates a 32 bit hash based on a mac address
  **/
-unsigned long int dhcp_hash(uint8_t *hwaddr) {
+uint32_t dhcp_hash(uint8_t *hwaddr) {
   return lookup(hwaddr, DHCP_ETH_ALEN, 0);
 }
 
--- a/src/ippool.c
+++ b/src/ippool.c
@@ -121,12 +121,12 @@ int ippool_hashdel(struct ippool_t *this
 }
 
 
-unsigned long int ippool_hash4(struct in_addr *addr) {
+uint32_t ippool_hash4(struct in_addr *addr) {
   return lookup((unsigned char*) &addr->s_addr, sizeof(addr->s_addr), 0);
 }
 
 #ifndef IPPOOL_NOIP6
-unsigned long int ippool_hash6(struct in6_addr *addr) {
+uint32_t ippool_hash6(struct in6_addr *addr) {
   return lookup((unsigned char*) addr->u6_addr8, sizeof(addr->u6_addr8), 0);
 }
 #endif
@@ -552,7 +552,7 @@ int ippool_freeip(struct ippool_t *this,
 
 
 #ifndef IPPOOL_NOIP6
-extern unsigned long int ippool_hash6(struct in6_addr *addr);
+extern uint32_t ippool_hash6(struct in6_addr *addr);
 extern int ippool_getip6(struct ippool_t *this, struct in6_addr *addr);
 extern int ippool_returnip6(struct ippool_t *this, struct in6_addr *addr);
 #endif
--- a/src/ippool.h
+++ b/src/ippool.h
@@ -102,7 +102,7 @@ struct ippoolm_t {
    bytes for each address. */
 
 /* Hash an IP address using code based on Bob Jenkins lookupa */
-extern unsigned long int ippool_hash4(struct in_addr *addr);
+extern uint32_t ippool_hash4(struct in_addr *addr);
 
 /* Create new address pool */
 extern int ippool_new(struct ippool_t **this, char *dyn,  char *stat, 
@@ -129,7 +129,7 @@ extern int ippool_aton(struct in_addr *a
 
 
 #ifndef IPPOOL_NOIP6
-extern unsigned long int ippool_hash6(struct in6_addr *addr);
+extern uint32_t ippool_hash6(struct in6_addr *addr);
 extern int ippool_getip6(struct ippool_t *this, struct in6_addr *addr);
 extern int ippool_returnip6(struct ippool_t *this, struct in6_addr *addr);
 #endif
--- a/src/lookup.c
+++ b/src/lookup.c
@@ -49,10 +49,12 @@
  * statistical properties and speed. It is NOT recommended for cryptographic
  * purposes.
  **/
-unsigned long int lookup( k, length, level)
+#include <stdint.h>
+
+uint32_t lookup( k, length, level)
 register unsigned char *k;         /* the key */
-register unsigned long int length; /* the length of the key */
-register unsigned long int level; /* the previous hash, or an arbitrary value*/
+register uint32_t length; /* the length of the key */
+register uint32_t level; /* the previous hash, or an arbitrary value*/
 {
 
 #define mix(a,b,c) \
@@ -68,9 +70,9 @@ register unsigned long int level; /* the
   c -= a; c -= b; c ^= (b>>15); \
 }
 
-  typedef  unsigned long  int  ub4;   /* unsigned 4-byte quantities */
+  typedef  uint32_t  ub4;   /* unsigned 4-byte quantities */
   typedef  unsigned       char ub1;   /* unsigned 1-byte quantities */
-  register unsigned long int a,b,c,len;
+  register uint32_t a,b,c,len;
   
   /* Set up the internal state */
   len = length;
--- a/src/lookup.h
+++ b/src/lookup.h
@@ -52,6 +52,9 @@
 
 #ifndef _LOOKUP_H
 #define _LOOKUP_H
-unsigned long int lookup( unsigned char *k, unsigned long int length, unsigned long int level);
+
+#include <stdint.h>
+
+uint32_t lookup( unsigned char *k, uint32_t length, uint32_t level);
 
 #endif	/* !_LOOKUP_H */
