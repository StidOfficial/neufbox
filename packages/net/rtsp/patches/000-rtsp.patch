diff -pNur rtsp/Makefile rtsp/Makefile
--- rtsp/Makefile	2008-11-17 11:37:53.000000000 +0100
+++ rtsp/Makefile	2008-11-17 12:25:24.000000000 +0100
@@ -4,7 +4,7 @@ ifndef CONFIG_NF_CONNTRACK
 $(error ** You need to enable NF_CONNTRACK in your kernel **)
 endif
 
-obj-$(CONFIG_NF_CONNTRACK) := nf_conntrack_rtsp.o nf_nat_rtsp.o
+obj-m := nf_conntrack_rtsp.o nf_nat_rtsp.o
 else
 
 # Normal Makefile
diff -pNur rtsp/nf_conntrack_rtsp.c rtsp/nf_conntrack_rtsp.c
--- rtsp/nf_conntrack_rtsp.c	2008-11-17 12:22:42.000000000 +0100
+++ rtsp/nf_conntrack_rtsp.c	2008-11-17 12:30:29.000000000 +0100
@@ -93,6 +93,231 @@ EXPORT_SYMBOL_GPL(nf_nat_rtsp_hook);
 
 #define SKIP_WSPACE(ptr,len,off) while(off < len && isspace(*(ptr+off))) { off++; }
 
+#if 0
+#undef pr_debug
+#define pr_debug printk
+#undef pr_info
+#define pr_info printk
+#endif
+
+#define RTSP_MATCHES(p, cmd) (!memcmp(p, cmd, sizeof(cmd) - 1))
+#define RTP_EXPIRES (180*HZ)
+#define RTSP_EXPIRES (60*60*HZ)
+
+struct rtsp {
+	struct list_head entry;
+	struct nf_conn const *rtsp;
+	struct nf_conn *rtp;
+	int inpause;
+	long expires;
+} rtsp_cache[16];
+
+static LIST_HEAD(rtsp_free_pool);
+static LIST_HEAD(rtsp_alloc_pool);
+
+static inline void print_conntrack(struct nf_conn const *ct)
+{
+	struct nf_conntrack_tuple const *tuple;
+
+	tuple = &ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple;
+	printk("ORIGINAL: src=%u.%u.%u.%u/%hu dst=%u.%u.%u.%u/%hu ",
+	        NIPQUAD(tuple->src.u3.ip), tuple->src.u.udp.port,
+	        NIPQUAD(tuple->dst.u3.ip), tuple->dst.u.udp.port);
+	tuple = &ct->tuplehash[IP_CT_DIR_REPLY].tuple;
+	printk("REPLY: src=%u.%u.%u.%u/%hu dst=%u.%u.%u.%u/%hu\n",
+	       NIPQUAD(tuple->src.u3.ip), tuple->src.u.udp.port,
+	       NIPQUAD(tuple->dst.u3.ip), tuple->dst.u.udp.port);
+}
+
+static void rtsp_print_conn(struct nf_conn const *ct)
+{
+	if (!ct) {
+		return;
+	}
+
+	/* pr_info("--\n"); */
+	if (!master_ct(ct)) {
+		pr_info("-- RTSP master --\n");
+		print_conntrack(ct);
+	} else {
+		pr_info("-- RTSP master --\n");
+		print_conntrack(master_ct(ct));
+		pr_info("-- RTP stream --\n");
+		print_conntrack(ct);
+	}
+	/* pr_info("--\n"); */
+}
+
+static inline void dbg_conntrack(struct nf_conn const *ct)
+{
+	struct nf_conntrack_tuple const *tuple;
+
+	tuple = &ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple;
+	pr_debug("ORIGINAL: src=%u.%u.%u.%u/%hu dst=%u.%u.%u.%u/%hu ",
+		 NIPQUAD(tuple->src.u3.ip), tuple->src.u.udp.port,
+		 NIPQUAD(tuple->dst.u3.ip), tuple->dst.u.udp.port);
+	tuple = &ct->tuplehash[IP_CT_DIR_REPLY].tuple;
+	pr_debug("REPLY: src=%u.%u.%u.%u/%hu dst=%u.%u.%u.%u/%hu\n",
+		 NIPQUAD(tuple->src.u3.ip), tuple->src.u.udp.port,
+		 NIPQUAD(tuple->dst.u3.ip), tuple->dst.u.udp.port);
+}
+
+static void rtsp_dgb_conn(struct nf_conn const *ct)
+{
+	if (!ct) {
+		return;
+	}
+
+	pr_debug("--\n");
+	if (!master_ct(ct)) {
+		pr_debug("-- RTSP master --\n");
+		dbg_conntrack(ct);
+	} else {
+		pr_debug("-- RTSP master --\n");
+		dbg_conntrack(master_ct(ct));
+		pr_debug("-- RTP stream --\n");
+		dbg_conntrack(ct);
+	}
+	pr_debug("\n");
+}
+
+static struct rtsp *rtsp_alloc(void)
+{
+	struct rtsp *rtsp;
+
+	if (list_empty(&rtsp_free_pool)) {
+		/* check for expired entry */
+		list_for_each_entry(rtsp, &rtsp_alloc_pool, entry) {
+			if (time_after_eq(jiffies, rtsp->expires)) {
+				pr_debug("RTSP expired found\n");
+				rtsp_dgb_conn(rtsp->rtp);
+				return rtsp;
+			}
+		}
+		return NULL;
+	}
+
+	rtsp = list_first_entry(&rtsp_free_pool, struct rtsp, entry);
+	list_move_tail(&rtsp->entry, &rtsp_alloc_pool);
+
+	return rtsp;
+}
+
+static void rtsp_free(struct rtsp *rtsp)
+{
+	list_move_tail(&rtsp->entry, &rtsp_free_pool);
+}
+
+static struct rtsp *rtsp_search(struct nf_conn const *ct)
+{
+	struct rtsp *rtsp;
+
+	dbg_conntrack(ct);
+	list_for_each_entry(rtsp, &rtsp_alloc_pool, entry) {
+		rtsp_dgb_conn(rtsp->rtp);
+		if (rtsp->rtsp == ct) {
+			return rtsp;
+		}
+	}
+
+	return NULL;
+}
+
+static void rtsp_pause_check(struct nf_conn const *ct)
+{
+	struct rtsp *rtsp;
+
+	dbg_conntrack(ct);
+	rtsp = rtsp_search(ct);
+	if (!rtsp) {
+		return;
+	}
+
+	rtsp->expires = jiffies + RTSP_EXPIRES;
+	pr_debug("RTSP: pause check\n");
+	rtsp_dgb_conn(rtsp->rtp);
+
+	if ((!!rtsp->rtp) && rtsp->inpause) {
+		/* refresh RTP stream */
+		pr_info("RTSP: update RTP conn...\n");
+		if (del_timer(&rtsp->rtp->timeout)) {
+			rtsp->rtp->timeout.expires = jiffies + RTP_EXPIRES;
+			add_timer(&rtsp->rtp->timeout);
+		}
+	}
+}
+
+static void rtsp_rtp_connected(struct nf_conn *ct)
+{
+	struct rtsp *rtsp;
+
+	pr_info("RTSP: RTP stream connected\n");
+	rtsp_print_conn(ct);
+
+	rtsp = rtsp_search(master_ct(ct));
+	if (!rtsp) {
+		rtsp = rtsp_alloc();
+		if (!rtsp) {
+			return;
+		}
+		rtsp->rtsp = master_ct(ct);
+	}
+
+	rtsp->expires = jiffies + RTSP_EXPIRES;
+	rtsp->rtp = ct;
+	rtsp->inpause = 0;
+}
+
+static void rtsp_process_setup(struct nf_conn *ct)
+{
+	pr_info("RTSP: %s ...\n", "SETUP");
+	rtsp_print_conn(ct);
+}
+
+static void rtsp_process_play(struct nf_conn const *ct)
+{
+	struct rtsp *rtsp;
+
+	pr_info("RTSP: %s ...\n", "PLAY");
+	rtsp_dgb_conn(ct);
+
+	rtsp = rtsp_search(ct);
+	if (!rtsp) {
+		return;
+	}
+	rtsp->inpause = 0;
+	rtsp->expires = jiffies + RTSP_EXPIRES;
+}
+
+static void rtsp_process_pause(struct nf_conn const *ct)
+{
+	struct rtsp *rtsp;
+
+	pr_info("RTSP: %s ...\n", "PAUSE");
+	rtsp_dgb_conn(ct);
+
+	rtsp = rtsp_search(ct);
+	if (!rtsp) {
+		return;
+	}
+	rtsp->inpause = 1;
+	rtsp->expires = jiffies + RTSP_EXPIRES;
+}
+
+static void rtsp_process_teardown(struct nf_conn const *ct)
+{
+	struct rtsp *rtsp;
+
+	pr_info("RTSP: %s ...\n", "TEARDOWN");
+	rtsp_dgb_conn(ct);
+
+	rtsp = rtsp_search(ct);
+	if (!rtsp) {
+		return;
+	}
+	rtsp_free(rtsp);
+}
+
 /*
  * Parse an RTSP packet.
  *
@@ -281,6 +506,8 @@ void expected(struct nf_conn *ct, struct
 	if (nf_nat_rtsp_expectfn && ct->master->status & IPS_NAT_MASK) {
 		nf_nat_rtsp_expectfn(ct, exp);
 	}
+
+	rtsp_rtp_connected(ct);
 }
 
 /*** conntrack functions ***/
@@ -325,9 +552,29 @@ static inline int help_out(struct sk_buf
 					&transoff, &translen))
 			break;	/* not a valid message */
 
-		if (strncmp(pdata + cmdoff, "SETUP ", 6) != 0)
+		/* Mark all RTSP paquets for High QoS */
+		skb->mark = 3;
+
+		if (RTSP_MATCHES(pdata + cmdoff, "PLAY ")) {
+			rtsp_process_play(ct);
+			continue;
+		}
+
+		if (RTSP_MATCHES(pdata + cmdoff, "PAUSE ")) {
+			rtsp_process_pause(ct);
+			continue;
+		}
+
+		if (RTSP_MATCHES(pdata + cmdoff, "TEARDOWN ")) {
+			rtsp_process_teardown(ct);
+			continue;
+		}
+
+		if (!RTSP_MATCHES(pdata + cmdoff, "SETUP ")) {
 			continue;	/* not a SETUP message */
-		pr_debug("found a setup message\n");
+		}
+
+		rtsp_process_setup(ct);
 
 		off = 0;
 		if (translen) {
@@ -450,6 +697,7 @@ static int help(struct sk_buff **pskb, u
 		break;
 	case IP_CT_DIR_REPLY:
 		pr_debug("IP_CT_DIR_REPLY\n");
+		rtsp_pause_check(ct);
 		/* inbound packet: server->client */
 		ret = NF_ACCEPT;
 		break;
@@ -535,6 +783,13 @@ static int __init init(void)
 		}
 		num_ports++;
 	}
+
+	for (i = 0; i < MAX_PORTS; i++) {
+		struct rtsp *ct_info = rtsp_cache + i;
+		INIT_LIST_HEAD(&ct_info->entry);
+		list_add_tail(&ct_info->entry, &rtsp_free_pool);
+	}
+
 	return 0;
 }
 
