Index: wide-dhcpv6-20080615/missing/getifaddrs.c
===================================================================
--- wide-dhcpv6-20080615.orig/missing/getifaddrs.c	2007-03-21 10:52:53.000000000 +0100
+++ wide-dhcpv6-20080615/missing/getifaddrs.c	2009-10-22 00:17:11.152967053 +0200
@@ -1,217 +1,867 @@
-/*
- * Copyright (c) 2006 WIDE Project. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- * 3. Neither the name of the project nor the names of its contributors
- *    may be used to endorse or promote products derived from this software
- *    without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- */
-
-#include <unistd.h>
-#include <stdlib.h>
+/* getifaddrs -- get names and addresses of all network interfaces
+   Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <features.h>
+#include <alloca.h>
+#include <assert.h>
 #include <errno.h>
+#include "ifaddrs.h"
+#include <net/if.h>
+#include <netinet/in.h>
+#include <netpacket/packet.h>
+#include <stdbool.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <stdio.h>
 #include <string.h>
-#include <sys/sockio.h>
+#include <sys/ioctl.h>
 #include <sys/socket.h>
-#include <net/if.h>
+#include <libc-internal.h>
+#include <time.h>
+#include <unistd.h>
 
-#include "ifaddrs.h"
+#include "netlinkaccess.h"
 
-static int
-get_lifreq(int fd, struct lifreq **ifr_ret)
+#ifndef __libc_use_alloca
+# define __libc_use_alloca(x) (x < __MAX_ALLOCA_CUTOFF)
+#endif
+
+extern int _dl_errno;
+#define __set_errno(X) {(_dl_errno) = (X);}
+
+#define TEMP_FAILURE_RETRY(expression) \
+  (__extension__							      \
+    ({ long int __result;						      \
+       do __result = (long int) (expression);				      \
+       while (__result == -1L && errno == EINTR);			      \
+       __result; }))
+
+#define extend_alloca(buf, len, newlen) \
+  (__typeof (buf)) ({ size_t __newlen = (newlen);			      \
+		      char *__newbuf = alloca (__newlen);		      \
+		      if (__newbuf + __newlen == (char *) buf)		      \
+			len += __newlen;				      \
+		      else						      \
+			len = __newlen;					      \
+		      __newbuf; })
+
+void *mempcpy (void *dstpp, const void *srcpp, size_t len)
 {
-	struct lifnum lifn;
-	struct lifconf lifc;
-	struct lifreq *lifrp;
-
-	lifn.lifn_family = AF_UNSPEC;
-	lifn.lifn_flags = 0;
-	if (ioctl(fd, SIOCGLIFNUM, &lifn) == -1)
-		lifn.lifn_count = 16;
-	else
-		lifn.lifn_count += 16;
-
-	for (;;) {
-		lifc.lifc_len = lifn.lifn_count * sizeof (*lifrp);
-		lifrp = malloc(lifc.lifc_len);
-		if (lifrp == NULL)
-			return (-1);
-
-		lifc.lifc_family = AF_UNSPEC;
-		lifc.lifc_flags = 0;
-		lifc.lifc_buf = (char *)lifrp;
-		if (ioctl(fd, SIOCGLIFCONF, &lifc) == -1) {
-			free(lifrp);
-			if (errno == EINVAL) {
-				lifn.lifn_count <<= 1;
-				continue;
-			}
-			(void) close(fd);
-			return (-1);
-		}
-		if (lifc.lifc_len < (lifn.lifn_count - 1) * sizeof (*lifrp))
-			break;
-		free(lifrp);
-		lifn.lifn_count <<= 1;
-	}
-	(void) close(fd);
+  memcpy(dstpp, srcpp, len);
+  return (void *)(((char *)dstpp) + len);
+}
+
+/* struct to hold the data for one ifaddrs entry, so we can allocate
+   everything at once.  */
+struct ifaddrs_storage
+{
+  struct ifaddrs ifa;
+  union
+  {
+    /* Save space for the biggest of the four used sockaddr types and
+       avoid a lot of casts.  */
+    struct sockaddr sa;
+    struct sockaddr_ll sl;
+    struct sockaddr_in s4;
+    struct sockaddr_in6 s6;
+  } addr, netmask, broadaddr;
+  char name[IF_NAMESIZE + 1];
+};
+
 
-	*ifr_ret = lifrp;
+void
+__netlink_free_handle (struct netlink_handle *h)
+{
+  struct netlink_res *ptr;
+  int saved_errno = errno;
+
+  ptr = h->nlm_list;
+  while (ptr != NULL)
+    {
+      struct netlink_res *tmpptr;
+
+      tmpptr = ptr->next;
+      free (ptr);
+      ptr = tmpptr;
+    }
 
-	return (lifc.lifc_len / sizeof (*lifrp));
+  __set_errno (saved_errno);
 }
 
-static size_t
-nbytes(const struct lifreq *lifrp, int nlif, size_t socklen)
+
+static int
+__netlink_sendreq (struct netlink_handle *h, int type)
+{
+  struct
+  {
+    struct nlmsghdr nlh;
+    struct rtgenmsg g;
+  } req;
+  struct sockaddr_nl nladdr;
+
+  if (h->seq == 0)
+    h->seq = time (NULL);
+
+  req.nlh.nlmsg_len = sizeof (req);
+  req.nlh.nlmsg_type = type;
+  req.nlh.nlmsg_flags = NLM_F_ROOT | NLM_F_MATCH | NLM_F_REQUEST;
+  req.nlh.nlmsg_pid = 0;
+  req.nlh.nlmsg_seq = h->seq;
+  req.g.rtgen_family = AF_UNSPEC;
+
+  memset (&nladdr, '\0', sizeof (nladdr));
+  nladdr.nl_family = AF_NETLINK;
+
+  return TEMP_FAILURE_RETRY (sendto (h->fd, (void *) &req, sizeof (req), 0,
+				       (struct sockaddr *) &nladdr,
+				       sizeof (nladdr)));
+}
+
+
+int
+__netlink_request (struct netlink_handle *h, int type)
 {
-	size_t len = 0;
-	size_t slen;
+  struct netlink_res *nlm_next;
+  struct netlink_res **new_nlm_list;
+  static volatile size_t buf_size = 4096;
+  char *buf;
+  struct sockaddr_nl nladdr;
+  struct nlmsghdr *nlmh;
+  ssize_t read_len;
+  bool done = false;
+  bool use_malloc = false;
+
+  if (__netlink_sendreq (h, type) < 0)
+    return -1;
+
+  size_t this_buf_size = buf_size;
+  if (__libc_use_alloca (this_buf_size))
+    buf = alloca (this_buf_size);
+  else
+    {
+      buf = malloc (this_buf_size);
+      if (buf != NULL)
+	use_malloc = true;
+      else
+	goto out_fail;
+    }
+
+  struct iovec iov = { buf, this_buf_size };
+
+  if (h->nlm_list != NULL)
+    new_nlm_list = &h->end_ptr->next;
+  else
+    new_nlm_list = &h->nlm_list;
+
+  while (! done)
+    {
+      struct msghdr msg =
+	{
+	  (void *) &nladdr, sizeof (nladdr),
+	  &iov, 1,
+	  NULL, 0,
+	  0
+	};
+
+      read_len = TEMP_FAILURE_RETRY (recvmsg (h->fd, &msg, 0));
+      if (read_len < 0)
+	goto out_fail;
+
+      if (nladdr.nl_pid != 0)
+	continue;
+
+      if (__builtin_expect (msg.msg_flags & MSG_TRUNC, 0))
+	{
+	  if (this_buf_size >= SIZE_MAX / 2)
+	    goto out_fail;
+
+	  nlm_next = *new_nlm_list;
+	  while (nlm_next != NULL)
+	    {
+	      struct netlink_res *tmpptr;
+
+	      tmpptr = nlm_next->next;
+	      free (nlm_next);
+	      nlm_next = tmpptr;
+	    }
+	  *new_nlm_list = NULL;
+
+	  if (__libc_use_alloca (2 * this_buf_size))
+	    buf = extend_alloca (buf, this_buf_size, 2 * this_buf_size);
+	  else
+	    {
+	      this_buf_size *= 2;
+
+	      char *new_buf = realloc (use_malloc ? buf : NULL, this_buf_size);
+	      if (new_buf == NULL)
+		goto out_fail;
+	      new_buf = buf;
+
+	      use_malloc = true;
+	    }
+	  buf_size = this_buf_size;
+
+	  iov.iov_base = buf;
+	  iov.iov_len = this_buf_size;
+
+	  /* Increase sequence number, so that we can distinguish
+	     between old and new request messages.  */
+	  h->seq++;
+
+	  if (__netlink_sendreq (h, type) < 0)
+	    goto out_fail;
 
-	while (nlif > 0) {
-		slen = strlen(lifrp->lifr_name) + 1;
-		len += sizeof (struct ifaddrs) + ((slen + 3) & ~3);
-		len += 3 * socklen;
-		lifrp++;
-		nlif--;
+	  continue;
 	}
-	return (len);
+
+      size_t count = 0;
+      size_t remaining_len = read_len;
+      for (nlmh = (struct nlmsghdr *) buf;
+	   NLMSG_OK (nlmh, remaining_len);
+	   nlmh = (struct nlmsghdr *) NLMSG_NEXT (nlmh, remaining_len))
+	{
+	  if ((pid_t) nlmh->nlmsg_pid != h->pid
+	      || nlmh->nlmsg_seq != h->seq)
+	    continue;
+
+	  ++count;
+	  if (nlmh->nlmsg_type == NLMSG_DONE)
+	    {
+	      /* We found the end, leave the loop.  */
+	      done = true;
+	      break;
+	    }
+	  if (nlmh->nlmsg_type == NLMSG_ERROR)
+	    {
+	      struct nlmsgerr *nlerr = (struct nlmsgerr *) NLMSG_DATA (nlmh);
+	      if (nlmh->nlmsg_len < NLMSG_LENGTH (sizeof (struct nlmsgerr)))
+		errno = EIO;
+	      else
+		errno = -nlerr->error;
+	      goto out_fail;
+	    }
+	}
+
+      /* If there was nothing with the expected nlmsg_pid and nlmsg_seq,
+	 there is no point to record it.  */
+      if (count == 0)
+	continue;
+
+      nlm_next = (struct netlink_res *) malloc (sizeof (struct netlink_res)
+						+ read_len);
+      if (nlm_next == NULL)
+	goto out_fail;
+      nlm_next->next = NULL;
+      nlm_next->nlh = memcpy (nlm_next + 1, buf, read_len);
+      nlm_next->size = read_len;
+      nlm_next->seq = h->seq;
+      if (h->nlm_list == NULL)
+	h->nlm_list = nlm_next;
+      else
+	h->end_ptr->next = nlm_next;
+      h->end_ptr = nlm_next;
+    }
+
+  if (use_malloc)
+    free (buf);
+  return 0;
+
+out_fail:
+  if (use_malloc)
+    free (buf);
+  return -1;
 }
 
-static struct sockaddr *
-addrcpy(struct sockaddr_storage *addr, char **bufp)
+
+void
+__netlink_close (struct netlink_handle *h)
 {
-	char *buf = *bufp;
-	size_t len;
+  /* Don't modify errno.  */
+  int serrno = errno;
+  close(h->fd);
+  __set_errno(serrno);
+}
+
 
-	len = addr->ss_family == AF_INET ? sizeof (struct sockaddr_in) :
-	    sizeof (struct sockaddr_in6);
-	(void) memcpy(buf, addr, len);
-	*bufp = buf + len;
-	return ((struct sockaddr *)buf);
+/* Open a NETLINK socket.  */
+int
+__netlink_open (struct netlink_handle *h)
+{
+  struct sockaddr_nl nladdr;
+
+  h->fd = socket (PF_NETLINK, SOCK_RAW, NETLINK_ROUTE);
+  if (h->fd < 0)
+    goto out;
+
+  memset (&nladdr, '\0', sizeof (nladdr));
+  nladdr.nl_family = AF_NETLINK;
+  if (bind (h->fd, (struct sockaddr *) &nladdr, sizeof (nladdr)) < 0)
+    {
+    close_and_out:
+      __netlink_close (h);
+    out:
+      return -1;
+    }
+  /* Determine the ID the kernel assigned for this netlink connection.
+     It is not necessarily the PID if there is more than one socket
+     open.  */
+  socklen_t addr_len = sizeof (nladdr);
+  if (getsockname (h->fd, (struct sockaddr *) &nladdr, &addr_len) < 0)
+    goto close_and_out;
+  h->pid = nladdr.nl_pid;
+  return 0;
 }
 
+
+/* We know the number of RTM_NEWLINK entries, so we reserve the first
+   # of entries for this type. All RTM_NEWADDR entries have an index
+   pointer to the RTM_NEWLINK entry.  To find the entry, create
+   a table to map kernel index entries to our index numbers.
+   Since we get at first all RTM_NEWLINK entries, it can never happen
+   that a RTM_NEWADDR index is not known to this map.  */
 static int
-populate(struct ifaddrs *ifa, int fd, struct lifreq *lifrp, int nlif, int af,
-    char **bufp)
+map_newlink (int idx, struct ifaddrs_storage *ifas, int *map, int max)
 {
-	char *buf = *bufp;
-	size_t slen;
+  int i;
 
-	while (nlif > 0) {
-		ifa->ifa_next = (nlif > 1) ? ifa + 1 : NULL;
-		(void) strcpy(ifa->ifa_name = buf, lifrp->lifr_name);
-		slen = strlen(lifrp->lifr_name) + 1;
-		buf += (slen + 3) & ~3;
-		if (ioctl(fd, SIOCGLIFFLAGS, lifrp) == -1)
-			ifa->ifa_flags = 0;
-		else
-			ifa->ifa_flags = lifrp->lifr_flags;
-		if (ioctl(fd, SIOCGLIFADDR, lifrp) == -1)
-			ifa->ifa_addr = NULL;
-		else
-			ifa->ifa_addr = addrcpy(&lifrp->lifr_addr, &buf);
-		if (ioctl(fd, SIOCGLIFNETMASK, lifrp) == -1)
-			ifa->ifa_netmask = NULL;
-		else
-			ifa->ifa_netmask = addrcpy(&lifrp->lifr_addr, &buf);
-		if (ifa->ifa_flags & IFF_POINTOPOINT) {
-			if (ioctl(fd, SIOCGLIFDSTADDR, lifrp) == -1)
-				ifa->ifa_dstaddr = NULL;
-			else
-				ifa->ifa_dstaddr =
-				    addrcpy(&lifrp->lifr_dstaddr, &buf);
-		} else if (ifa->ifa_flags & IFF_BROADCAST) {
-			if (ioctl(fd, SIOCGLIFBRDADDR, lifrp) == -1)
-				ifa->ifa_broadaddr = NULL;
-			else
-				ifa->ifa_broadaddr =
-				    addrcpy(&lifrp->lifr_broadaddr, &buf);
-		} else {
-			ifa->ifa_dstaddr = NULL;
-		}
-
-		ifa++;
-		nlif--;
-		lifrp++;
+  for (i = 0; i < max; i++)
+    {
+      if (map[i] == -1)
+	{
+	  map[i] = idx;
+	  if (i > 0)
+	    ifas[i - 1].ifa.ifa_next = &ifas[i].ifa;
+	  return i;
 	}
-	*bufp = buf;
-	return (0);
+      else if (map[i] == idx)
+	return i;
+    }
+  /* This should never be reached. If this will be reached, we have
+     a very big problem.  */
+  abort ();
 }
 
+
+/* Create a linked list of `struct ifaddrs' structures, one for each
+   network interface on the host machine.  If successful, store the
+   list in *IFAP and return 0.  On errors, return -1 and set `errno'.  */
 int
-getifaddrs(struct ifaddrs **ifap)
+getifaddrs (struct ifaddrs **ifap)
 {
-	int fd4, fd6;
-	int nif4, nif6 = 0;
-	struct lifreq *ifr4 = NULL;
-	struct lifreq *ifr6 = NULL;
-	struct ifaddrs *ifa = NULL;
-	char *buf;
-
-	if ((fd4 = socket(AF_INET, SOCK_DGRAM, 0)) == -1)
-		return (-1);
-	if ((fd6 = socket(AF_INET6, SOCK_DGRAM, 0)) == -1 &&
-	    errno != EAFNOSUPPORT) {
-		(void) close(fd4);
-		return (-1);
+  struct netlink_handle nh = { 0, 0, 0, NULL, NULL };
+  struct netlink_res *nlp;
+  struct ifaddrs_storage *ifas;
+  unsigned int i, newlink, newaddr, newaddr_idx;
+  int *map_newlink_data;
+  size_t ifa_data_size = 0;  /* Size to allocate for all ifa_data.  */
+  char *ifa_data_ptr;	/* Pointer to the unused part of memory for
+				ifa_data.  */
+  int result = 0;
+
+  if (ifap)
+    *ifap = NULL;
+
+  if (__netlink_open (&nh) < 0)
+    {
+      return -1;
+    }
+
+  /* Tell the kernel that we wish to get a list of all
+     active interfaces, collect all data for every interface.  */
+  if (__netlink_request (&nh, RTM_GETLINK) < 0)
+    {
+      result = -1;
+      goto exit_free;
+    }
+
+  /* Now ask the kernel for all addresses which are assigned
+     to an interface and collect all data for every interface.
+     Since we store the addresses after the interfaces in the
+     list, we will later always find the interface before the
+     corresponding addresses.  */
+  ++nh.seq;
+  if (__netlink_request (&nh, RTM_GETADDR) < 0)
+    {
+      result = -1;
+      goto exit_free;
+    }
+
+  /* Count all RTM_NEWLINK and RTM_NEWADDR entries to allocate
+     enough memory.  */
+  newlink = newaddr = 0;
+  for (nlp = nh.nlm_list; nlp; nlp = nlp->next)
+    {
+      struct nlmsghdr *nlh;
+      size_t size = nlp->size;
+
+      if (nlp->nlh == NULL)
+	continue;
+
+      /* Walk through all entries we got from the kernel and look, which
+	 message type they contain.  */
+      for (nlh = nlp->nlh; NLMSG_OK (nlh, size); nlh = NLMSG_NEXT (nlh, size))
+	{
+	  /* Check if the message is what we want.  */
+	  if ((pid_t) nlh->nlmsg_pid != nh.pid || nlh->nlmsg_seq != nlp->seq)
+	    continue;
+
+	  if (nlh->nlmsg_type == NLMSG_DONE)
+	    break;		/* ok */
+
+	  if (nlh->nlmsg_type == RTM_NEWLINK)
+	    {
+	      /* A RTM_NEWLINK message can have IFLA_STATS data. We need to
+		 know the size before creating the list to allocate enough
+		 memory.  */
+	      struct ifinfomsg *ifim = (struct ifinfomsg *) NLMSG_DATA (nlh);
+	      struct rtattr *rta = IFLA_RTA (ifim);
+	      size_t rtasize = IFLA_PAYLOAD (nlh);
+
+	      while (RTA_OK (rta, rtasize))
+		{
+		  size_t rta_payload = RTA_PAYLOAD (rta);
+
+		  if (rta->rta_type == IFLA_STATS)
+		    {
+		      ifa_data_size += rta_payload;
+		      break;
+		    }
+		  else
+		    rta = RTA_NEXT (rta, rtasize);
+		}
+	      ++newlink;
+	    }
+	  else if (nlh->nlmsg_type == RTM_NEWADDR)
+	    ++newaddr;
 	}
+    }
+
+  /* Return if no interface is up.  */
+  if ((newlink + newaddr) == 0)
+    goto exit_free;
+
+  /* Allocate memory for all entries we have and initialize next
+     pointer.  */
+  ifas = (struct ifaddrs_storage *) calloc (1,
+					    (newlink + newaddr)
+					    * sizeof (struct ifaddrs_storage)
+					    + ifa_data_size);
+  if (ifas == NULL)
+    {
+      result = -1;
+      goto exit_free;
+    }
+
+  /* Table for mapping kernel index to entry in our list.  */
+  map_newlink_data = alloca (newlink * sizeof (int));
+  memset (map_newlink_data, '\xff', newlink * sizeof (int));
+
+  ifa_data_ptr = (char *) &ifas[newlink + newaddr];
+  newaddr_idx = 0;		/* Counter for newaddr index.  */
+
+  /* Walk through the list of data we got from the kernel.  */
+  for (nlp = nh.nlm_list; nlp; nlp = nlp->next)
+    {
+      struct nlmsghdr *nlh;
+      size_t size = nlp->size;
+
+      if (nlp->nlh == NULL)
+	continue;
+
+      /* Walk through one message and look at the type: If it is our
+	 message, we need RTM_NEWLINK/RTM_NEWADDR and stop if we reach
+	 the end or we find the end marker (in this case we ignore the
+	 following data.  */
+      for (nlh = nlp->nlh; NLMSG_OK (nlh, size); nlh = NLMSG_NEXT (nlh, size))
+	{
+	  int ifa_index = 0;
+
+	  /* Check if the message is the one we want */
+	  if ((pid_t) nlh->nlmsg_pid != nh.pid || nlh->nlmsg_seq != nlp->seq)
+	    continue;
+
+	  if (nlh->nlmsg_type == NLMSG_DONE)
+	    break;		/* ok */
+
+	  if (nlh->nlmsg_type == RTM_NEWLINK)
+	    {
+	      /* We found a new interface. Now extract everything from the
+		 interface data we got and need.  */
+	      struct ifinfomsg *ifim = (struct ifinfomsg *) NLMSG_DATA (nlh);
+	      struct rtattr *rta = IFLA_RTA (ifim);
+	      size_t rtasize = IFLA_PAYLOAD (nlh);
+
+	      /* Interfaces are stored in the first "newlink" entries
+		 of our list, starting in the order as we got from the
+		 kernel.  */
+	      ifa_index = map_newlink (ifim->ifi_index - 1, ifas,
+				       map_newlink_data, newlink);
+	      ifas[ifa_index].ifa.ifa_flags = ifim->ifi_flags;
+
+	      while (RTA_OK (rta, rtasize))
+		{
+		  char *rta_data = RTA_DATA (rta);
+		  size_t rta_payload = RTA_PAYLOAD (rta);
+
+		  switch (rta->rta_type)
+		    {
+		    case IFLA_ADDRESS:
+		      if (rta_payload <= sizeof (ifas[ifa_index].addr))
+			{
+			  ifas[ifa_index].addr.sl.sll_family = AF_PACKET;
+			  memcpy (ifas[ifa_index].addr.sl.sll_addr,
+				  (char *) rta_data, rta_payload);
+			  ifas[ifa_index].addr.sl.sll_halen = rta_payload;
+			  ifas[ifa_index].addr.sl.sll_ifindex
+			    = ifim->ifi_index;
+			  ifas[ifa_index].addr.sl.sll_hatype = ifim->ifi_type;
+
+			  ifas[ifa_index].ifa.ifa_addr
+			    = &ifas[ifa_index].addr.sa;
+			}
+		      break;
+
+		    case IFLA_BROADCAST:
+		      if (rta_payload <= sizeof (ifas[ifa_index].broadaddr))
+			{
+			  ifas[ifa_index].broadaddr.sl.sll_family = AF_PACKET;
+			  memcpy (ifas[ifa_index].broadaddr.sl.sll_addr,
+				  (char *) rta_data, rta_payload);
+			  ifas[ifa_index].broadaddr.sl.sll_halen = rta_payload;
+			  ifas[ifa_index].broadaddr.sl.sll_ifindex
+			    = ifim->ifi_index;
+			  ifas[ifa_index].broadaddr.sl.sll_hatype
+			    = ifim->ifi_type;
+
+			  ifas[ifa_index].ifa.ifa_broadaddr
+			    = &ifas[ifa_index].broadaddr.sa;
+			}
+		      break;
+
+		    case IFLA_IFNAME:	/* Name of Interface */
+		      if ((rta_payload + 1) <= sizeof (ifas[ifa_index].name))
+			{
+			  ifas[ifa_index].ifa.ifa_name = ifas[ifa_index].name;
+			  *(char *) mempcpy (ifas[ifa_index].name, rta_data,
+					       rta_payload) = '\0';
+			}
+		      break;
 
-	if ((nif4 = get_lifreq(fd4, &ifr4)) == -1 ||
-	    (fd6 != -1 && (nif6 = get_lifreq(fd6, &ifr6)) == -1))
-		goto failure;
-
-	if (nif4 == 0 && nif6 == 0) {
-		*ifap = NULL;
-		return (0);
+		    case IFLA_STATS:	/* Statistics of Interface */
+		      ifas[ifa_index].ifa.ifa_data = ifa_data_ptr;
+		      ifa_data_ptr += rta_payload;
+		      memcpy (ifas[ifa_index].ifa.ifa_data, rta_data,
+			      rta_payload);
+		      break;
+
+		    case IFLA_UNSPEC:
+		      break;
+		    case IFLA_MTU:
+		      break;
+		    case IFLA_LINK:
+		      break;
+		    case IFLA_QDISC:
+		      break;
+		    default:
+		      break;
+		    }
+
+		  rta = RTA_NEXT (rta, rtasize);
+		}
+	    }
+	  else if (nlh->nlmsg_type == RTM_NEWADDR)
+	    {
+	      struct ifaddrmsg *ifam = (struct ifaddrmsg *) NLMSG_DATA (nlh);
+	      struct rtattr *rta = IFA_RTA (ifam);
+	      size_t rtasize = IFA_PAYLOAD (nlh);
+
+	      /* New Addresses are stored in the order we got them from
+		 the kernel after the interfaces. Theoretically it is possible
+		 that we have holes in the interface part of the list,
+		 but we always have already the interface for this address.  */
+	      ifa_index = newlink + newaddr_idx;
+	      ifas[ifa_index].ifa.ifa_flags
+		= ifas[map_newlink (ifam->ifa_index - 1, ifas,
+				    map_newlink_data, newlink)].ifa.ifa_flags;
+	      if (ifa_index > 0)
+		ifas[ifa_index - 1].ifa.ifa_next = &ifas[ifa_index].ifa;
+	      ++newaddr_idx;
+
+	      while (RTA_OK (rta, rtasize))
+		{
+		  char *rta_data = RTA_DATA (rta);
+		  size_t rta_payload = RTA_PAYLOAD (rta);
+
+		  switch (rta->rta_type)
+		    {
+		    case IFA_ADDRESS:
+		      {
+			struct sockaddr *sa;
+
+			if (ifas[ifa_index].ifa.ifa_addr != NULL)
+			  {
+			    /* In a point-to-poing network IFA_ADDRESS
+			       contains the destination address, local
+			       address is supplied in IFA_LOCAL attribute.
+			       destination address and broadcast address
+			       are stored in an union, so it doesn't matter
+			       which name we use.  */
+			    ifas[ifa_index].ifa.ifa_broadaddr
+			      = &ifas[ifa_index].broadaddr.sa;
+			    sa = &ifas[ifa_index].broadaddr.sa;
+			  }
+			else
+			  {
+			    ifas[ifa_index].ifa.ifa_addr
+			      = &ifas[ifa_index].addr.sa;
+			    sa = &ifas[ifa_index].addr.sa;
+			  }
+
+			sa->sa_family = ifam->ifa_family;
+
+			switch (ifam->ifa_family)
+			  {
+			  case AF_INET:
+			    /* Size must match that of an address for IPv4.  */
+			    if (rta_payload == 4)
+			      memcpy (&((struct sockaddr_in *) sa)->sin_addr,
+				      rta_data, rta_payload);
+			    break;
+
+			  case AF_INET6:
+			    /* Size must match that of an address for IPv6.  */
+			    if (rta_payload == 16)
+			      {
+				memcpy (&((struct sockaddr_in6 *) sa)->sin6_addr,
+					rta_data, rta_payload);
+				if (IN6_IS_ADDR_LINKLOCAL (rta_data)
+				    || IN6_IS_ADDR_MC_LINKLOCAL (rta_data))
+				  ((struct sockaddr_in6 *) sa)->sin6_scope_id
+				    = ifam->ifa_index;
+			      }
+			    break;
+
+			  default:
+			    if (rta_payload <= sizeof (ifas[ifa_index].addr))
+			      memcpy (sa->sa_data, rta_data, rta_payload);
+			    break;
+			  }
+		      }
+		      break;
+
+		    case IFA_LOCAL:
+		      if (ifas[ifa_index].ifa.ifa_addr != NULL)
+			{
+			  /* If ifa_addr is set and we get IFA_LOCAL,
+			     assume we have a point-to-point network.
+			     Move address to correct field.  */
+			  ifas[ifa_index].broadaddr = ifas[ifa_index].addr;
+			  ifas[ifa_index].ifa.ifa_broadaddr
+			    = &ifas[ifa_index].broadaddr.sa;
+			  memset (&ifas[ifa_index].addr, '\0',
+				  sizeof (ifas[ifa_index].addr));
+			}
+
+		      ifas[ifa_index].ifa.ifa_addr = &ifas[ifa_index].addr.sa;
+		      ifas[ifa_index].ifa.ifa_addr->sa_family
+			= ifam->ifa_family;
+
+		      switch (ifam->ifa_family)
+			{
+			case AF_INET:
+			  /* Size must match that of an address for IPv4.  */
+			  if (rta_payload == 4)
+			    memcpy (&ifas[ifa_index].addr.s4.sin_addr,
+				  rta_data, rta_payload);
+			  break;
+
+			case AF_INET6:
+			  /* Size must match that of an address for IPv6.  */
+			  if (rta_payload == 16)
+			    {
+			      memcpy (&ifas[ifa_index].addr.s6.sin6_addr,
+				      rta_data, rta_payload);
+			      if (IN6_IS_ADDR_LINKLOCAL (rta_data)
+				  || IN6_IS_ADDR_MC_LINKLOCAL (rta_data))
+				ifas[ifa_index].addr.s6.sin6_scope_id =
+				  ifam->ifa_index;
+			    }
+			  break;
+
+			default:
+			  if (rta_payload <= sizeof (ifas[ifa_index].addr))
+			    memcpy (ifas[ifa_index].addr.sa.sa_data,
+				    rta_data, rta_payload);
+			  break;
+			}
+		      break;
+
+		    case IFA_BROADCAST:
+		      /* We get IFA_BROADCAST, so IFA_LOCAL was too much.  */
+		      if (ifas[ifa_index].ifa.ifa_broadaddr != NULL)
+			memset (&ifas[ifa_index].broadaddr, '\0',
+				sizeof (ifas[ifa_index].broadaddr));
+
+		      ifas[ifa_index].ifa.ifa_broadaddr
+			= &ifas[ifa_index].broadaddr.sa;
+		      ifas[ifa_index].ifa.ifa_broadaddr->sa_family
+			= ifam->ifa_family;
+
+		      switch (ifam->ifa_family)
+			{
+			case AF_INET:
+			  /* Size must match that of an address for IPv4.  */
+			  if (rta_payload == 4)
+			    memcpy (&ifas[ifa_index].broadaddr.s4.sin_addr,
+				    rta_data, rta_payload);
+			  break;
+
+			case AF_INET6:
+			  /* Size must match that of an address for IPv6.  */
+			  if (rta_payload == 16)
+			    {
+			      memcpy (&ifas[ifa_index].broadaddr.s6.sin6_addr,
+				      rta_data, rta_payload);
+			      if (IN6_IS_ADDR_LINKLOCAL (rta_data)
+				  || IN6_IS_ADDR_MC_LINKLOCAL (rta_data))
+				ifas[ifa_index].broadaddr.s6.sin6_scope_id
+				  = ifam->ifa_index;
+			    }
+			  break;
+
+			default:
+			  if (rta_payload <= sizeof (ifas[ifa_index].addr))
+			    memcpy (&ifas[ifa_index].broadaddr.sa.sa_data,
+				    rta_data, rta_payload);
+			  break;
+			}
+		      break;
+
+		    case IFA_LABEL:
+		      if (rta_payload + 1 <= sizeof (ifas[ifa_index].name))
+			{
+			  ifas[ifa_index].ifa.ifa_name = ifas[ifa_index].name;
+			  *(char *) mempcpy (ifas[ifa_index].name, rta_data,
+					       rta_payload) = '\0';
+			}
+		      else
+			abort ();
+		      break;
+
+		    case IFA_UNSPEC:
+		      break;
+		    case IFA_CACHEINFO:
+		      break;
+		    default:
+		      break;
+		    }
+
+		  rta = RTA_NEXT (rta, rtasize);
+		}
+
+	      /* If we didn't get the interface name with the
+		 address, use the name from the interface entry.  */
+	      if (ifas[ifa_index].ifa.ifa_name == NULL)
+		ifas[ifa_index].ifa.ifa_name
+		  = ifas[map_newlink (ifam->ifa_index - 1, ifas,
+				      map_newlink_data, newlink)].ifa.ifa_name;
+
+	      /* Calculate the netmask.  */
+	      if (ifas[ifa_index].ifa.ifa_addr
+		  && ifas[ifa_index].ifa.ifa_addr->sa_family != AF_UNSPEC
+		  && ifas[ifa_index].ifa.ifa_addr->sa_family != AF_PACKET)
+		{
+		  uint32_t max_prefixlen = 0;
+		  char *cp = NULL;
+
+		  ifas[ifa_index].ifa.ifa_netmask
+		    = &ifas[ifa_index].netmask.sa;
+
+		  switch (ifas[ifa_index].ifa.ifa_addr->sa_family)
+		    {
+		    case AF_INET:
+		      cp = (char *) &ifas[ifa_index].netmask.s4.sin_addr;
+		      max_prefixlen = 32;
+		      break;
+
+		    case AF_INET6:
+		      cp = (char *) &ifas[ifa_index].netmask.s6.sin6_addr;
+		      max_prefixlen = 128;
+		      break;
+		    }
+
+		  ifas[ifa_index].ifa.ifa_netmask->sa_family
+		    = ifas[ifa_index].ifa.ifa_addr->sa_family;
+
+		  if (cp != NULL)
+		    {
+		      char c;
+		      unsigned int preflen;
+
+		      if ((max_prefixlen > 0) &&
+			  (ifam->ifa_prefixlen > max_prefixlen))
+			preflen = max_prefixlen;
+		      else
+			preflen = ifam->ifa_prefixlen;
+
+		      for (i = 0; i < (preflen / 8); i++)
+			*cp++ = 0xff;
+		      c = 0xff;
+		      c <<= (8 - (preflen % 8));
+		      *cp = c;
+		    }
+		}
+	    }
 	}
+    }
+
+  assert (ifa_data_ptr <= (char *) &ifas[newlink + newaddr] + ifa_data_size);
 
-	ifa = malloc(nbytes(ifr4, nif4, sizeof (struct sockaddr_in)) +
-	    nbytes(ifr6, nif6, sizeof (struct sockaddr_in6)));
-	if (ifa == NULL)
-		goto failure;
-
-	buf = (char *)(ifa + nif4 + nif6);
-
-	if (populate(ifa, fd4, ifr4, nif4, AF_INET, &buf) == -1)
-		goto failure;
-	if (nif4 > 0 && nif6 > 0)
-		ifa[nif4 - 1].ifa_next = ifa + nif4;
-	if (populate(ifa + nif4, fd6, ifr6, nif6, AF_INET6, &buf) == -1)
-		goto failure;
-
-	return (0);
-
-failure:
-	free(ifa);
-	(void) close(fd4);
-	if (fd6 != -1)
-		(void) close(fd6);
-	free(ifr4);
-	free(ifr6);
-	return (-1);
+  if (newaddr_idx > 0)
+    {
+      for (i = 0; i < newlink; ++i)
+	if (map_newlink_data[i] == -1)
+	  {
+	    /* We have fewer links then we anticipated.  Adjust the
+	       forward pointer to the first address entry.  */
+	    ifas[i - 1].ifa.ifa_next = &ifas[newlink].ifa;
+	  }
+
+      if (i == 0 && newlink > 0)
+	/* No valid link, but we allocated memory.  We have to
+	   populate the first entry.  */
+	memmove (ifas, &ifas[newlink], sizeof (struct ifaddrs_storage));
+    }
+
+  if (ifap != NULL)
+    *ifap = &ifas[0].ifa;
+
+ exit_free:
+  __netlink_free_handle (&nh);
+  __netlink_close (&nh);
+
+  return result;
 }
 
+
 void
-freeifaddrs(struct ifaddrs *ifa)
+freeifaddrs (struct ifaddrs *ifa)
 {
-	free(ifa);
+  free (ifa);
 }
Index: wide-dhcpv6-20080615/missing/ifaddrs.h
===================================================================
--- wide-dhcpv6-20080615.orig/missing/ifaddrs.h	2007-03-21 10:52:53.000000000 +0100
+++ wide-dhcpv6-20080615/missing/ifaddrs.h	2009-10-22 00:17:11.172935651 +0200
@@ -1,44 +1,72 @@
-/*
- * Copyright (c) 2006 WIDE Project. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- * 3. Neither the name of the project nor the names of its contributors
- *    may be used to endorse or promote products derived from this software
- *    without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- */
-
-#include <sys/types.h>
-
-#undef ifa_broadaddr
-#undef ifa_dstaddr
-struct ifaddrs {
-	struct ifaddrs	*ifa_next;	/* Pointer to next struct */
-	char		*ifa_name;	/* Interface name */
-	uint64_t	ifa_flags;	/* Interface flags */
-	struct sockaddr	*ifa_addr;	/* Interface address */
-	struct sockaddr	*ifa_netmask;	/* Interface netmask */
-	struct sockaddr	*ifa_dstaddr;	/* P2P interface destination */
+/* ifaddrs.h -- declarations for getting network interface addresses
+   Copyright (C) 2002 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#ifndef _IFADDRS_H
+#define _IFADDRS_H	1
+
+#include <features.h>
+#include <sys/socket.h>
+
+
+/* The `getifaddrs' function generates a linked list of these structures.
+   Each element of the list describes one network interface.  */
+struct ifaddrs
+{
+  struct ifaddrs *ifa_next;	/* Pointer to the next structure.  */
+
+  char *ifa_name;		/* Name of this network interface.  */
+  unsigned int ifa_flags;	/* Flags as from SIOCGIFFLAGS ioctl.  */
+
+  struct sockaddr *ifa_addr;	/* Network address of this interface.  */
+  struct sockaddr *ifa_netmask; /* Netmask of this interface.  */
+  union
+  {
+    /* At most one of the following two is valid.  If the IFF_BROADCAST
+       bit is set in `ifa_flags', then `ifa_broadaddr' is valid.  If the
+       IFF_POINTOPOINT bit is set, then `ifa_dstaddr' is valid.
+       It is never the case that both these bits are set at once.  */
+    struct sockaddr *ifu_broadaddr; /* Broadcast address of this interface. */
+    struct sockaddr *ifu_dstaddr; /* Point-to-point destination address.  */
+  } ifa_ifu;
+  /* These very same macros are defined by <net/if.h> for `struct ifaddr'.
+     So if they are defined already, the existing definitions will be fine.  */
+# ifndef ifa_broadaddr
+#  define ifa_broadaddr	ifa_ifu.ifu_broadaddr
+# endif
+# ifndef ifa_dstaddr
+#  define ifa_dstaddr	ifa_ifu.ifu_dstaddr
+# endif
+
+  void *ifa_data;		/* Address-specific data (may be unused).  */
 };
-#define	ifa_broadaddr	ifa_dstaddr
 
-extern int getifaddrs(struct ifaddrs **);
-extern void freeifaddrs(struct ifaddrs *);
+
+/* Create a linked list of `struct ifaddrs' structures, one for each
+   network interface on the host machine.  If successful, store the
+   list in *IFAP and return 0.  On errors, return -1 and set `errno'.
+
+   The storage returned in *IFAP is allocated dynamically and can
+   only be properly freed by passing it to `freeifaddrs'.  */
+extern int getifaddrs (struct ifaddrs **__ifap) __THROW;
+
+/* Reclaim the storage allocated by a previous `getifaddrs' call.  */
+extern void freeifaddrs (struct ifaddrs *__ifa)  __THROW;
+
+
+#endif /* ifaddrs.h */
Index: wide-dhcpv6-20080615/missing/netlinkaccess.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ wide-dhcpv6-20080615/missing/netlinkaccess.h	2009-10-22 00:17:11.180935615 +0200
@@ -0,0 +1,55 @@
+/* Copyright (C) 2004, 2005 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#ifndef _NETLINKACCESS_H
+#define _NETLINKACCESS_H 1
+
+#include <features.h>
+#include <stdint.h>
+#include <unistd.h>
+#include <sys/types.h>
+
+#define _LINUX_TYPES_H
+typedef uint8_t __u8;
+typedef uint16_t __u16;
+typedef uint32_t __u32;
+typedef uint64_t __u64;
+typedef int32_t __s32;
+#include <linux/rtnetlink.h>
+#include <linux/netlink.h>
+
+struct netlink_res
+{
+  struct netlink_res *next;
+  struct nlmsghdr *nlh;
+  size_t size;			/* Size of response.  */
+  uint32_t seq;			/* sequential number we used.  */
+};
+
+
+struct netlink_handle
+{
+  int fd;			/* Netlink file descriptor.  */
+  pid_t pid;			/* Process ID.  */
+  uint32_t seq;			/* The sequence number we use currently.  */
+  struct netlink_res *nlm_list;	/* Pointer to list of responses.  */
+  struct netlink_res *end_ptr;	/* For faster append of new entries.  */
+};
+
+
+#endif /* _NETLINKACCESS_H */
Index: wide-dhcpv6-20080615/Makefile.in
===================================================================
--- wide-dhcpv6-20080615.orig/Makefile.in	2009-10-22 00:23:50.549206339 +0200
+++ wide-dhcpv6-20080615/Makefile.in	2009-10-22 00:24:18.993686225 +0200
@@ -36,7 +36,7 @@
 user= @user@
 group= @group@
 
-CFLAGS=	@CFLAGS@ @DEFS@ -DSYSCONFDIR=\"${sysconfdir}\" \
+CFLAGS=	@CFLAGS@ @DEFS@ -I$(srcdir)/missing -DSYSCONFDIR=\"${sysconfdir}\" \
 	-DLOCALDBDIR=\"${localdbdir}\"
 LDFLAGS=@LDFLAGS@
 LIBOBJS=@LIBOBJS@
