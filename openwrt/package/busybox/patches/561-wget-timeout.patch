diff --exclude=.svn -Naur busybox-1.11.3/networking/wget.c busybox-1.11.3/networking/wget.c
--- busybox-1.11.3/networking/wget.c	2009-01-21 15:33:38.670187097 +0100
+++ busybox-1.11.3/networking/wget.c	2009-01-21 15:44:37.810283513 +0100
@@ -7,7 +7,12 @@
  */
 
 #include "libbb.h"
+#include <sys/time.h>
+#include <sys/types.h>
 #include <sys/socket.h>
+#include <sys/select.h>
+#include <sys/syscall.h>
+
 #include <netinet/in.h>
 #include <netinet/ip.h> /* superset of previous */
 
@@ -35,6 +40,7 @@ struct globals {
 	unsigned lastupdate_sec;
 	unsigned start_sec;
 #endif
+	unsigned long timeout;    /* Wget timeout */
 	smallint chunked;             /* chunked transfer encoding */
 };
 #define G (*(struct globals*)&bb_common_bufsiz1)
@@ -50,6 +56,7 @@ struct BUG_G_too_big {
 #define lastupdate_sec  (G.lastupdate_sec )
 #define start_sec       (G.start_sec      )
 #define chunked         (G.chunked        )
+#define timeout         (G.timeout        )
 #define INIT_G() do { } while (0)
 
 
@@ -196,35 +203,88 @@ static ALWAYS_INLINE void progressmeter(
 
 #endif
 
+/* The Linux kernel can in some situations update the timeout value. */
+static int linux_pselect(int nfds, fd_set *readfds, fd_set *writefds,
+		fd_set *exceptfds, const struct timespec *ts,
+		const sigset_t *sigmask)
+{
+	/* Note: the system call expects 7 values but on most architectures
+	 * we can only pass in 6 directly.  If there is an architecture with
+	 * support for more parameters a new version of this file needs to
+	 * be created.  */
+	struct {
+		const sigset_t *ss;
+		size_t ss_len;
+	} data;
+
+	data.ss = sigmask;
+	data.ss_len = _NSIG / 8;
+
+	return syscall(__NR_pselect6, nfds, readfds, writefds, exceptfds, ts, &data);
+}
+
+static void wget_timeout(int fd)
+{
+	fd_set rfds;
+	struct timespec ts;
+
+	FD_ZERO(&rfds);
+	FD_SET(fd, &rfds);
+	ts.tv_sec = timeout;
+	ts.tv_nsec = 0;
+
+	for (;;) {
+		int err = linux_pselect(fd + 1, &rfds, NULL, NULL, &ts, NULL);
+		if (err <= 0) {
+			if (err == 0) {/* timeout */
+				printf("wget: timeout %lu aborted\n", timeout);
+				exit(2); /* special magic for timeout */
+			}
+			if (errno == EINTR)
+				continue;
+			exit(EXIT_FAILURE);
+		}
+		/* data ready */
+		break;
+	}
+}
 
 /* Read NMEMB bytes into PTR from STREAM.  Returns the number of bytes read,
  * and a short count if an eof or non-interrupt error is encountered.  */
-static size_t safe_fread(void *ptr, size_t nmemb, FILE *stream)
+static ssize_t wget_read(int fd, void *ptr, size_t nmemb)
 {
-	size_t ret;
-	char *p = (char*)ptr;
+	if (timeout)
+		wget_timeout(fd);
 
-	do {
-		clearerr(stream);
-		ret = fread(p, 1, nmemb, stream);
-		p += ret;
-		nmemb -= ret;
-	} while (nmemb && ferror(stream) && errno == EINTR);
-
-	return p - (char*)ptr;
+	return safe_read(fd, ptr, nmemb);
 }
 
 /* Read a line or SIZE-1 bytes into S, whichever is less, from STREAM.
  * Returns S, or NULL if an eof or non-interrupt error is encountered.  */
-static char *safe_fgets(char *s, int size, FILE *stream)
+static char *wget_gets(int fd, char *s, int size)
 {
-	char *ret;
+	char *ret = s;
+	ssize_t n;
+
+	if (!size)
+		return NULL;
 
 	do {
-		clearerr(stream);
-		ret = fgets(s, size, stream);
-	} while (ret == NULL && ferror(stream) && errno == EINTR);
+		n = safe_read(fd, s, 1);
+		if (n < 0)
+			return NULL;
+		size--;
+		if ((*s == '\0') || (*s == '\n')) {
+			if (size)
+				++s;
+			*s = '\0';
+			return ret;
+		}
+		s++;
+	} while (size);
 
+	/* truncated */
+	*(s-1) = '\0';
 	return ret;
 }
 
@@ -241,42 +301,36 @@ static char *base64enc_512(char buf[512]
 #endif
 
 
-static FILE *open_socket(len_and_sockaddr *lsa)
+static int open_socket(len_and_sockaddr *lsa)
 {
 	int fd;
-	FILE *fp;
 	int tos;
 
 	/* glibc 2.4 seems to try seeking on it - ??! */
 	/* hopefully it understands what ESPIPE means... */
 	fd = xconnect_stream(lsa);
 	if (fd < 0)
-		bb_perror_msg_and_die("fdopen");
+		bb_perror_msg_and_die("xconnect_stream");
 
 	tos = (0x2D<<2);
 	setsockopt(fd, SOL_IP, IP_TOS, &tos, sizeof(tos));
 
-	fp = fdopen(fd, "r+");
-	if (fp == NULL)
-		bb_perror_msg_and_die("fdopen");
-
-	return fp;
+	return fd;
 }
 
 
-static int ftpcmd(const char *s1, const char *s2, FILE *fp, char *buf)
+static int ftpcmd(int fd, const char *s1, const char *s2, char *buf)
 {
 	int result;
 	if (s1) {
 		if (!s2) s2 = "";
-		fprintf(fp, "%s%s\r\n", s1, s2);
-		fflush(fp);
+		dprintf(fd, "%s%s\r\n", s1, s2);
 	}
 
 	do {
 		char *buf_ptr;
 
-		if (fgets(buf, 510, fp) == NULL) {
+		if (wget_gets(fd, buf, 510) == NULL) {
 			bb_perror_msg_and_die("error getting response");
 		}
 		buf_ptr = strstr(buf, "\r\n");
@@ -351,15 +405,16 @@ static void parse_url(char *src_url, str
 }
 
 
-static char *gethdr(char *buf, size_t bufsiz, FILE *fp /*, int *istrunc*/)
+static char *gethdr(int fd, char *buf, size_t bufsiz /*, int *istrunc*/)
 {
 	char *s, *hdrval;
-	int c;
+	ssize_t n;
+	char c;
 
 	/* *istrunc = 0; */
 
 	/* retrieve header line */
-	if (fgets(buf, bufsiz, fp) == NULL)
+	if (wget_gets(fd, buf, bufsiz) == NULL)
 		return NULL;
 
 	/* see if we are at the end of the headers */
@@ -391,8 +446,10 @@ static char *gethdr(char *buf, size_t bu
 	}
 
 	/* Rats! The buffer isn't big enough to hold the entire header value. */
-	while (c = getc(fp), c != EOF && c != '\n')
-		continue;
+	do {
+		n = safe_read(fd, &c, 1);
+	} while ((n == 1) && (c != '\n'));
+	
 	/* *istrunc = 1; */
 	return hdrval;
 }
@@ -415,14 +472,15 @@ int wget_main(int argc ATTRIBUTE_UNUSED,
 	char *extra_headers = NULL;
 	llist_t *headers_llist = NULL;
 #endif
-	FILE *sfp = NULL;               /* socket to web/ftp server         */
-	FILE *dfp;                      /* socket to ftp server (data)      */
+	int sfp = 0;               /* socket to web/ftp server         */
+	int dfp;                      /* socket to ftp server (data)      */
 	char *fname_out;                /* where to direct output (-O)      */
 	bool got_clen = 0;              /* got content-length: from server  */
 	int output_fd = -1;
 	bool use_proxy = 1;             /* Use proxies if env vars are set  */
 	const char *proxy_flag = "on";  /* Use proxies if env vars are set  */
 	const char *user_agent = "Wget";/* "User-Agent" header field        */
+	const char *str_timeout = NULL;
 
 	static const char keywords[] ALIGN1 =
 		"content-length\0""transfer-encoding\0""chunked\0""location\0";
@@ -454,7 +512,7 @@ int wget_main(int argc ATTRIBUTE_UNUSED,
 		"user-agent\0"       Required_argument "U"
 		/* Ignored: */
 		// "tries\0"            Required_argument "t"
-		// "timeout\0"          Required_argument "T"
+		"timeout\0"          Required_argument "T"
 		/* Ignored (we always use PASV): */
 		"passive-ftp\0"      No_argument       "\xfd"
 		"header\0"           Required_argument "\xfe"
@@ -472,13 +530,15 @@ int wget_main(int argc ATTRIBUTE_UNUSED,
 				&fname_out, &dir_prefix,
 				&proxy_flag, &user_agent,
 				NULL, /* -t RETRIES */
-				NULL /* -T NETWORK_READ_TIMEOUT */
+				&str_timeout /* -T NETWORK_READ_TIMEOUT */
 				USE_FEATURE_WGET_LONG_OPTIONS(, &headers_llist)
 				);
 	if (strcmp(proxy_flag, "off") == 0) {
 		/* Use the proxy if necessary */
 		use_proxy = 0;
 	}
+	if (str_timeout)
+		timeout = strtoul(str_timeout, NULL, 0);
 #if ENABLE_FEATURE_WGET_LONG_OPTIONS
 	if (headers_llist) {
 		int size = 1;
@@ -565,45 +625,45 @@ int wget_main(int argc ATTRIBUTE_UNUSED,
 				bb_error_msg_and_die("too many redirections");
 
 			/* Open socket to http server */
-			if (sfp) fclose(sfp);
+			if (sfp) close(sfp);
 			sfp = open_socket(lsa);
 
 			/* Send HTTP request.  */
 			if (use_proxy) {
-				fprintf(sfp, "GET %stp://%s/%s HTTP/1.1\r\n",
+				dprintf(sfp, "GET %stp://%s/%s HTTP/1.1\r\n",
 					target.is_ftp ? "f" : "ht", target.host,
 					target.path);
 			} else {
-				fprintf(sfp, "GET /%s HTTP/1.1\r\n", target.path);
+				dprintf(sfp, "GET /%s HTTP/1.1\r\n", target.path);
 			}
 
-			fprintf(sfp, "Host: %s\r\nUser-Agent: %s\r\n",
+			dprintf(sfp, "Host: %s\r\nUser-Agent: %s\r\n",
 				target.host, user_agent);
 
 #if ENABLE_FEATURE_WGET_AUTHENTICATION
 			if (target.user) {
-				fprintf(sfp, "Proxy-Authorization: Basic %s\r\n"+6,
+				dprintf(sfp, "Proxy-Authorization: Basic %s\r\n"+6,
 					base64enc_512(buf, target.user));
 			}
 			if (use_proxy && server.user) {
-				fprintf(sfp, "Proxy-Authorization: Basic %s\r\n",
+				dprintf(sfp, "Proxy-Authorization: Basic %s\r\n",
 					base64enc_512(buf, server.user));
 			}
 #endif
 
 			if (beg_range)
-				fprintf(sfp, "Range: bytes=%"OFF_FMT"d-\r\n", beg_range);
+				dprintf(sfp, "Range: bytes=%"OFF_FMT"d-\r\n", beg_range);
 #if ENABLE_FEATURE_WGET_LONG_OPTIONS
 			if (extra_headers)
-				fputs(extra_headers, sfp);
+				dprintf(sfp, extra_headers);
 #endif
-			fprintf(sfp, "Connection: close\r\n\r\n");
+			dprintf(sfp, "Connection: close\r\n\r\n");
 
 			/*
 			* Retrieve HTTP response line and check for "200" status code.
 			*/
  read_response:
-			if (fgets(buf, sizeof(buf), sfp) == NULL)
+			if (wget_gets(sfp, buf, sizeof(buf)) == NULL)
 				bb_error_msg_and_die("no response from server");
 
 			str = buf;
@@ -615,7 +675,7 @@ int wget_main(int argc ATTRIBUTE_UNUSED,
 			switch (status) {
 			case 0:
 			case 100:
-				while (gethdr(buf, sizeof(buf), sfp /*, &n*/) != NULL)
+				while (gethdr(sfp, buf, sizeof(buf) /*, &n*/) != NULL)
 					/* eat all remaining headers */;
 				goto read_response;
 			case 200:
@@ -666,7 +726,7 @@ However, in real world it was observed t
 			/*
 			 * Retrieve HTTP headers.
 			 */
-			while ((str = gethdr(buf, sizeof(buf), sfp /*, &n*/)) != NULL) {
+			while ((str = gethdr(sfp, buf, sizeof(buf) /*, &n*/)) != NULL) {
 				/* gethdr did already convert the "FOO:" string to lowercase */
 				smalluint key = index_in_strings(keywords, *&buf) + 1;
 				if (key == KEY_content_length) {
@@ -711,7 +771,7 @@ However, in real world it was observed t
 			target.user = xstrdup("anonymous:busybox@");
 
 		sfp = open_socket(lsa);
-		if (ftpcmd(NULL, NULL, sfp, buf) != 220)
+		if (ftpcmd(sfp, NULL, NULL, buf) != 220)
 			bb_error_msg_and_die("%s", buf+4);
 
 		/*
@@ -721,23 +781,23 @@ However, in real world it was observed t
 		str = strchr(target.user, ':');
 		if (str)
 			*(str++) = '\0';
-		switch (ftpcmd("USER ", target.user, sfp, buf)) {
+		switch (ftpcmd(sfp, "USER ", target.user, buf)) {
 		case 230:
 			break;
 		case 331:
-			if (ftpcmd("PASS ", str, sfp, buf) == 230)
+			if (ftpcmd(sfp, "PASS ", str, buf) == 230)
 				break;
 			/* fall through (failed login) */
 		default:
 			bb_error_msg_and_die("ftp login: %s", buf+4);
 		}
 
-		ftpcmd("TYPE I", NULL, sfp, buf);
+		ftpcmd(sfp, "TYPE I", NULL, buf);
 
 		/*
 		 * Querying file size
 		 */
-		if (ftpcmd("SIZE ", target.path, sfp, buf) == 213) {
+		if (ftpcmd(sfp, "SIZE ", target.path, buf) == 213) {
 			content_len = BB_STRTOOFF(buf+4, NULL, 10);
 			if (errno || content_len < 0) {
 				bb_error_msg_and_die("SIZE value is garbage");
@@ -748,7 +808,7 @@ However, in real world it was observed t
 		/*
 		 * Entering passive mode
 		 */
-		if (ftpcmd("PASV", NULL, sfp, buf) != 227) {
+		if (ftpcmd(sfp, "PASV", NULL, buf) != 227) {
  pasv_error:
 			bb_error_msg_and_die("bad response to %s: %s", "PASV", buf);
 		}
@@ -769,17 +829,17 @@ However, in real world it was observed t
 
 		if (beg_range) {
 			sprintf(buf, "REST %"OFF_FMT"d", beg_range);
-			if (ftpcmd(buf, NULL, sfp, buf) == 350)
+			if (ftpcmd(sfp, buf, NULL, buf) == 350)
 				content_len -= beg_range;
 		}
 
-		if (ftpcmd("RETR ", target.path, sfp, buf) > 150)
+		if (ftpcmd(sfp, "RETR ", target.path, buf) > 150)
 			bb_error_msg_and_die("bad response to %s: %s", "RETR", buf);
 	}
 
 	if (opt & WGET_OPT_SPIDER) {
 		if (ENABLE_FEATURE_CLEAN_UP)
-			fclose(sfp);
+			close(sfp);
 		return EXIT_SUCCESS;
 	}
 
@@ -810,9 +870,9 @@ However, in real world it was observed t
 
 			if (content_len < sizeof(buf) && (chunked || got_clen))
 				rdsz = (unsigned)content_len;
-			n = safe_fread(buf, rdsz, dfp);
+			n = wget_read(dfp, buf, rdsz);
 			if (n <= 0) {
-				if (ferror(dfp)) {
+				if (n < 0) {
 					/* perror will not work: ferror doesn't set errno */
 					bb_error_msg_and_die(bb_msg_read_error);
 				}
@@ -829,9 +889,9 @@ However, in real world it was observed t
 		if (!chunked)
 			break;
 
-		safe_fgets(buf, sizeof(buf), dfp); /* This is a newline */
+		wget_gets(dfp, buf, sizeof(buf)); /* This is a newline */
  get_clen:
-		safe_fgets(buf, sizeof(buf), dfp);
+		wget_gets(dfp, buf, sizeof(buf));
 		content_len = STRTOOFF(buf, NULL, 16);
 		/* FIXME: error check? */
 		if (content_len == 0)
@@ -842,10 +902,10 @@ However, in real world it was observed t
 		progressmeter(0);
 
 	if ((use_proxy == 0) && target.is_ftp) {
-		fclose(dfp);
-		if (ftpcmd(NULL, NULL, sfp, buf) != 226)
+		close(dfp);
+		if (ftpcmd(sfp, NULL, NULL, buf) != 226)
 			bb_error_msg_and_die("ftp error: %s", buf+4);
-		ftpcmd("QUIT", NULL, sfp, buf);
+		ftpcmd(sfp, "QUIT", NULL, buf);
 	}
 
 	return EXIT_SUCCESS;
