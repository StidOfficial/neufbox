--- a/arch/mips/kernel/traps.c
+++ b/arch/mips/kernel/traps.c
@@ -43,6 +43,9 @@
 #include <asm/watch.h>
 #include <asm/types.h>
 #include <asm/stacktrace.h>
+#ifdef CONFIG_CPU_CAVIUM_OCTEON
+#include "../cavium-octeon/hal.h"
+#endif
 
 extern asmlinkage void handle_int(void);
 extern asmlinkage void handle_tlbm(void);
@@ -71,6 +74,22 @@ extern asmlinkage void handle_reserved(v
 extern int fpu_emulator_cop1Handler(struct pt_regs *xcp,
 	struct mips_fpu_struct *ctx, int has_fpu);
 
+#ifdef CONFIG_CPU_CAVIUM_OCTEON
+extern asmlinkage void octeon_cop2_restore(struct octeon_cop2_state *task);
+#endif
+
+#ifdef CONFIG_REPLACE_EMULATED_ACCESS_TO_THREAD_POINTER
+/* 	0 - Use the normal kernel emulation without any changes.
+	1 - Replace emulated instructions with direct accesses to the thread
+		register.
+	2 - Replace emulated instructions and log the replacement PC.
+	3 - Replace emulated instructions with break instructions. This will
+		cause programs to fail, but makes it easy to stop gdb on the
+		instruction. */
+static int thread_pointer_mode = 0;
+module_param(thread_pointer_mode, int, 0644);
+#endif
+
 void (*board_be_init)(void);
 int (*board_be_handler)(struct pt_regs *regs, int is_fixup);
 void (*board_nmi_handler_setup)(void);
@@ -389,6 +408,71 @@ asmlinkage void do_be(struct pt_regs *re
 		break;
 	}
 
+#ifdef CONFIG_CPU_CAVIUM_OCTEON
+    /* Some Octeons have an errata where PCIe config space reads to non existent
+        devices can cause a bus error. In order to support PCIe bus enumeration,
+        we check for this happening as a special case. Due to how the config
+        space code is arranged, we know that the bus error will occur on the
+        instruction directly after the offending config read. By checking that
+        the previous instruction is a load to config space, we can
+        determine that the bus error was caused by the errata. If all this is
+        true we make the result of the load -1 to emulate a failed config
+        space read. Note that after this happens the PCIe port is dead.
+        This errata affects CN57XX, CN56XX, CN55XX, and CN54XX pass
+        1.0 and 1.1. */
+    if (unlikely((OCTEON_IS_MODEL(OCTEON_CN56XX_PASS1) || OCTEON_IS_MODEL(OCTEON_CN56XX_PASS1_1)) && !user_mode(regs)))
+    {
+        unsigned long inst_pc = regs->cp0_epc-4;
+        /* Only try fixup if the EPC is a CKSEG0 address */
+        if ((inst_pc & 0xfffffffff0000000ull) == 0xffffffff80000000ull)
+        {
+            uint32_t inst = *(uint32_t*)inst_pc;
+            /* Make sure the offset is zero. Not a strict requirement, but
+                it makes this checking less likely to get false positives */
+            if ((inst & 0xffff) == 0)
+            {
+                int base_reg = (inst>>21) & 0x1f;
+                /* The base register must be a PCIe config address. It can be
+                    to any port, bus, device, function, or register */
+                if ((regs->regs[base_reg] & 0xfffffffce0000000ull) == 0x8001190400000000ull)
+                {
+                    int result_reg = (inst>>16) & 0x1f;
+                    int pcie_port = (regs->regs[base_reg] >> 32) & 0x3;
+                    int pcie_bus = (regs->regs[base_reg] >> 20) & 0xff;
+                    int pcie_dev = (regs->regs[base_reg] >> 15) & 0x1f;
+                    int pcie_func = (regs->regs[base_reg] >> 12) & 0x7;
+                    int pcie_reg = (regs->regs[base_reg] >> 0) & 0xfff;
+                    /* Figure out what to do based on the opcode */
+                    switch ((inst>>26) & 0x3f)
+                    {
+                        case 0x20: /* LB */
+                        case 0x21: /* LH */
+                        case 0x23: /* LW */
+                            printk("Bus error detected on PCIe%d config space read %d:%d.%d:0x%03x. Fixing.\n", pcie_port, pcie_bus, pcie_dev, pcie_func, pcie_reg);
+                            regs->regs[result_reg] = 0xffffffffffffffffull;
+                            return;
+                        case 0x24: /* LBU */
+                            printk("Bus error detected on PCIe%d config space read %d:%d.%d:0x%03x. Fixing.\n", pcie_port, pcie_bus, pcie_dev, pcie_func, pcie_reg);
+                            regs->regs[result_reg] = 0x00000000000000ffull;
+                            return;
+                        case 0x25: /* LHU */
+                            printk("Bus error detected on PCIe%d config space read %d:%d.%d:0x%03x. Fixing.\n", pcie_port, pcie_bus, pcie_dev, pcie_func, pcie_reg);
+                            regs->regs[result_reg] = 0x000000000000ffffull;
+                            return;
+                        case 0x27: /* LWU */
+                            printk("Bus error detected on PCIe%d config space read %d:%d.%d:0x%03x. Fixing.\n", pcie_port, pcie_bus, pcie_dev, pcie_func, pcie_reg);
+                            regs->regs[result_reg] = 0x00000000ffffffffull;
+                            return;
+                        default:
+                            /* We can't handle it. Fall through and panic */
+                            break;
+                    }
+                }
+            }
+        }
+    }
+#endif
+
 	/*
 	 * Assume it would be too dangerous to continue ...
 	 */
@@ -561,6 +645,9 @@ static inline int simulate_rdhwr(struct
 {
 	struct thread_info *ti = task_thread_info(current);
 	unsigned int opcode;
+#ifdef CONFIG_REPLACE_EMULATED_ACCESS_TO_THREAD_POINTER
+	unsigned int __user *epc = (unsigned int __user *)regs->cp0_epc + ((regs->cp0_cause & CAUSEF_BD) != 0);
+#endif
 
 	if (get_user(opcode, (unsigned int __user *) exception_epc(regs)))
 		goto out_sigsegv;
@@ -574,11 +661,36 @@ static inline int simulate_rdhwr(struct
 		switch (rd) {
 			case 29:
 				regs->regs[rt] = ti->tp_value;
+#ifdef CONFIG_REPLACE_EMULATED_ACCESS_TO_THREAD_POINTER
+				if (thread_pointer_mode)
+				{
+					unsigned int new_instruction = 0x00000025 | (26 << 21) | (rt << 11); /* move [rt], k0 */
+					if (thread_pointer_mode == 3)
+						new_instruction = 0x0000000d; /* break */
+					if (access_process_vm(current, (unsigned long)epc, &new_instruction, sizeof(new_instruction), 1) != sizeof(new_instruction))
+						printk(KERN_ERR "Failed to replaced emulated RDHWR at PC=%p\n", epc);
+					if (thread_pointer_mode == 2)
+						printk(KERN_INFO "Replaced emulated RDHWR at PC=%p with \"move $%d, k0\"\n", epc, rt);
+					else if (thread_pointer_mode == 3)
+						printk(KERN_INFO "Replaced emulated RDHWR at PC=%p with \"break\"\n", epc);
+				}
+#endif
 				return 0;
 			default:
 				return -EFAULT;
 		}
 	}
+#ifdef CONFIG_REPLACE_EMULATED_ACCESS_TO_THREAD_POINTER
+	else if (opcode == (0x00000025 | (26 << 21) | (3 << 11)) /* move v1, k0 */)
+	{
+		/* We need to flush the icache, not emulate an instruction. The EPC is wrong, 
+			so we need to put it back to the old instruction */
+		//printk(KERN_INFO "Already replaced emulated RDHWR at PC=%p\n", epc);
+		regs->cp0_epc = (unsigned long)epc;
+		flush_cache_sigtramp((unsigned long)epc);
+		return 0;
+	}
+#endif
 
 	/* Not ours.  */
 	return -EFAULT;
@@ -822,6 +934,21 @@ asmlinkage void do_cpu(struct pt_regs *r
 		return;
 
 	case 2:
+#ifdef CONFIG_CPU_CAVIUM_OCTEON
+	{
+		unsigned long flags;
+		int status;
+		prefetch(&current->thread.cp2);
+		local_irq_save(flags);
+		KSTK_STATUS(current) |= ST0_CU2;
+		status = read_c0_status();
+		write_c0_status(status | ST0_CU2);
+		octeon_cop2_restore(&(current->thread.cp2));
+		write_c0_status(status & ~ST0_CU2);
+		local_irq_restore(flags);
+		return;
+	}
+#endif
 	case 3:
 		break;
 	}
@@ -1335,6 +1462,13 @@ void __init per_cpu_trap_init(void)
 #ifdef CONFIG_64BIT
 	status_set |= ST0_FR|ST0_KX|ST0_SX|ST0_UX;
 #endif
+#ifdef CONFIG_CPU_CAVIUM_OCTEON
+	/*
+	 * Note: We always set ST0_KX on Octeon since IO addresses are at 
+	 * 64bit addresses. Keep in mind this also moves the TLB handler. 
+	 */
+	status_set |= ST0_KX;
+#endif
 	if (current_cpu_data.isa_level == MIPS_CPU_ISA_IV)
 		status_set |= ST0_XX;
 	change_c0_status(ST0_CU|ST0_MX|ST0_RE|ST0_FR|ST0_BEV|ST0_TS|ST0_KX|ST0_SX|ST0_UX,
@@ -1353,6 +1487,9 @@ void __init per_cpu_trap_init(void)
 		write_c0_hwrena(enable);
 	}
 #endif
+#ifdef CONFIG_CPU_CAVIUM_OCTEON
+	write_c0_hwrena (0xc000000f); /* Octeon has register 30 and 31 */
+#endif
 
 #ifdef CONFIG_MIPS_MT_SMTC
 	if (!secondaryTC) {
@@ -1455,7 +1592,11 @@ void __init trap_init(void)
 	if (cpu_has_veic || cpu_has_vint)
 		ebase = (unsigned long) alloc_bootmem_low_pages (0x200 + VECTORSPACING*64);
 	else
+#ifdef CONFIG_CPU_MIPSR2
+		ebase = CAC_BASE + (read_c0_ebase() & 0x3ffff000);
+#else
 		ebase = CAC_BASE;
+#endif
 
 	mips_srs_init();
 
@@ -1565,11 +1706,11 @@ void __init trap_init(void)
 
 	if (cpu_has_vce)
 		/* Special exception: R4[04]00 uses also the divec space. */
-		memcpy((void *)(CAC_BASE + 0x180), &except_vec3_r4000, 0x100);
+		memcpy((void *)(ebase + 0x180), &except_vec3_r4000, 0x100);
 	else if (cpu_has_4kex)
-		memcpy((void *)(CAC_BASE + 0x180), &except_vec3_generic, 0x80);
+		memcpy((void *)(ebase + 0x180), &except_vec3_generic, 0x80);
 	else
-		memcpy((void *)(CAC_BASE + 0x080), &except_vec3_generic, 0x80);
+		memcpy((void *)(ebase + 0x080), &except_vec3_generic, 0x80);
 
 	signal_init();
 #ifdef CONFIG_MIPS32_COMPAT
