--- a/arch/mips/Kconfig.debug
+++ b/arch/mips/Kconfig.debug
@@ -28,6 +28,13 @@ config CMDLINE
 	  other cases you can specify kernel args so that you don't have
 	  to set them up in board prom initialization routines.
 
+config DEBUG_STACKOVERFLOW
+	bool "Check for stack overflows"
+	depends on DEBUG_KERNEL
+	help
+	  This option will cause messages to be printed if free stack
+	  space drops below a certain limit.
+
 config DEBUG_STACK_USAGE
 	bool "Enable stack utilization instrumentation"
 	depends on DEBUG_KERNEL
--- a/arch/mips/kernel/irq.c
+++ b/arch/mips/kernel/irq.c
@@ -151,6 +151,37 @@ static int __init nokgdb(char *str)
 __setup("nokgdb", nokgdb);
 #endif
 
+#ifdef CONFIG_DEBUG_STACKOVERFLOW
+static inline void check_stack_overflow(void)
+{
+	unsigned long sp;
+
+	asm volatile("move %0, $sp" : "=r" (sp));
+	sp = sp & THREAD_MASK;
+
+	/*
+	 * check for stack overflow: is there less than STACK_WARN free?
+	 * STACK_WARN is defined as 1/8 of THREAD_SIZE by default.
+	 */
+	if (unlikely(sp < (sizeof(struct thread_info) + STACK_WARN))) {
+		printk("do_IRQ: stack overflow: %ld\n",
+				sp - sizeof(struct thread_info));
+		dump_stack();
+	}
+}
+
+void __irq_entry do_IRQ(unsigned int irq)
+{
+	irq_enter();
+
+	check_stack_overflow();
+
+	__DO_IRQ_SMTC_HOOK(irq);
+	generic_handle_irq(irq);
+	irq_exit();
+}
+#endif
+
 void __init init_IRQ(void)
 {
 	arch_init_irq();
--- a/include/asm-mips/irq.h
+++ b/include/asm-mips/irq.h
@@ -49,6 +49,7 @@ do {									\
  * Ideally there should be away to get this into kernel/irq/handle.c to
  * avoid the overhead of a call for just a tiny function ...
  */
+#ifndef CONFIG_DEBUG_STACKOVERFLOW
 #define do_IRQ(irq)							\
 do {									\
 	irq_enter();							\
@@ -56,6 +57,9 @@ do {									\
 	generic_handle_irq(irq);					\
 	irq_exit();							\
 } while (0)
+#else
+extern void do_IRQ(unsigned int irq);
+#endif
 
 extern void arch_init_irq(void);
 extern void spurious_interrupt(void);
--- a/include/asm-mips/thread_info.h
+++ b/include/asm-mips/thread_info.h
@@ -82,6 +82,8 @@ register struct thread_info *__current_t
 #define THREAD_SIZE (PAGE_SIZE << THREAD_SIZE_ORDER)
 #define THREAD_MASK (THREAD_SIZE - 1UL)
 
+#define STACK_WARN  (THREAD_SIZE/8)
+
 #ifdef CONFIG_DEBUG_STACK_USAGE
 #define alloc_thread_info(tsk)					\
 ({								\
