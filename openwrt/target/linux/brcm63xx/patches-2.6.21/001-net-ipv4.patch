--- a/net/ipv4/ip_input.c
+++ b/net/ipv4/ip_input.c
@@ -145,6 +145,9 @@
 #include <net/xfrm.h>
 #include <linux/mroute.h>
 #include <linux/netlink.h>
+#if defined (CONFIG_MIPS_BRCM)
+#include <linux/blog.h>
+#endif
 
 /*
  *	SNMP management statistics
@@ -262,6 +265,12 @@ static inline int ip_local_deliver_finis
  */
 int ip_local_deliver(struct sk_buff *skb)
 {
+
+/* do not track locally delivered packets */
+#if defined (CONFIG_MIPS_BRCM)
+	blog_skip(skb);
+#endif
+
 	/*
 	 *	Reassemble IP fragments.
 	 */
--- a/net/ipv4/netfilter/ip_queue.c
+++ b/net/ipv4/netfilter/ip_queue.c
@@ -288,7 +288,11 @@ ipq_enqueue_packet(struct sk_buff *skb,
 	struct sk_buff *nskb;
 	struct ipq_queue_entry *entry;
 
+#if defined(CONFIG_MIPS_BRCM)
+	if (copy_mode == IPQ_COPY_NONE && !skb->ipvs_property)
+	#else
 	if (copy_mode == IPQ_COPY_NONE)
+#endif /* CONFIG_MIPS_BRCM */
 		return -EAGAIN;
 
 	entry = kmalloc(sizeof(*entry), GFP_ATOMIC);
@@ -296,10 +300,22 @@ ipq_enqueue_packet(struct sk_buff *skb,
 		printk(KERN_ERR "ip_queue: OOM in ipq_enqueue_packet()\n");
 		return -ENOMEM;
 	}
+#if defined(CONFIG_MIPS_BRCM) && 0
+	        skb->nat_cache_add = NULL;
+#endif
 
 	entry->info = info;
 	entry->skb = skb;
 
+#if defined(CONFIG_MIPS_BRCM)
+	if (skb->ipvs_property) {
+		write_lock_bh(&queue_lock);
+		__ipq_enqueue_entry(entry);
+		write_unlock_bh(&queue_lock);
+		return 1;
+	}
+#endif /* CONFIG_MIPS_BRCM */
+
 	nskb = ipq_build_packet_message(entry, &status);
 	if (nskb == NULL)
 		goto err_out_free;
@@ -572,6 +588,467 @@ ipq_rcv_dev_event(struct notifier_block
 	return NOTIFY_DONE;
 }
 
+#if defined(CONFIG_MIPS_BRCM)
+#if 1
+#define DEBUGP printk
+#else
+#define DEBUGP(format, args...)
+#endif /* CONFIG_MIPS_BRCM */
+
+/* Dynahelper tracker status */
+#define DH_STAT_UNLOADED 0
+#define DH_STAT_LOADING 1
+#define DH_STAT_LOADED 2
+#define DH_STAT_RUNNING 3
+
+struct dh_tracker {
+	struct list_head list;
+	char proto[DYNAHELPER_MAXPROTONAMELEN + 1];
+	unsigned long timeout;
+	int stat;
+	u_int32_t refcount;
+	struct module *module;
+	struct timer_list timer;
+};
+
+extern void (*dynahelper_track)(struct module * m);
+extern void (*dynahelper_untrack)(struct module * m);
+extern void (*dynahelper_ref)(struct module * m);
+extern void (*dynahelper_unref)(struct module * m);
+
+static rwlock_t dh_lock = RW_LOCK_UNLOCKED;
+static LIST_HEAD(dh_trackers);
+static int dh_pid;
+static struct sock *dhnl;
+static DECLARE_MUTEX(dhnl_sem);
+
+/****************************************************************************/
+static void dh_send_msg(struct dh_tracker *tracker, int type)
+{
+	struct sk_buff *skb;
+	struct nlmsghdr *nlh;
+	struct ipq_packet_msg *pmsg;
+
+	if (!dhnl)
+		return;
+
+	skb = alloc_skb(NLMSG_SPACE(sizeof(*pmsg)), GFP_ATOMIC);
+	if (!skb) {
+		printk(KERN_ERR "dh_send_msg: alloc_skb() error\n");
+		return;
+	}
+	nlh = __nlmsg_put(skb, 0, 0, type, sizeof(*pmsg), 0);
+	pmsg = NLMSG_DATA(nlh);
+	strcpy(pmsg->indev_name, tracker->proto);
+	netlink_unicast(dhnl, skb, dh_pid, MSG_DONTWAIT);
+}
+
+/****************************************************************************/
+static inline void dh_load_helper(struct dh_tracker *tracker)
+{
+	DEBUGP("dh_load_helper: load helper %s\n", tracker->proto);
+	dh_send_msg(tracker, IPQM_DYNAHELPER_LOAD);
+}
+
+/****************************************************************************/
+static inline void dh_unload_helper(struct dh_tracker *tracker)
+{
+	DEBUGP("dh_unload_helper: unload helper %s\n", tracker->proto);
+	dh_send_msg(tracker, IPQM_DYNAHELPER_UNLOAD);
+}
+
+/****************************************************************************/
+static void dh_start_timer(struct dh_tracker *tracker, int timeout)
+{
+	if (timeout == 0) {
+		if ((timeout = tracker->timeout * HZ) == 0)
+			return;
+	}
+
+	mod_timer(&tracker->timer, jiffies + timeout);
+	DEBUGP("dh_start_timer: helper %s timer started\n", tracker->proto);
+}
+
+/****************************************************************************/
+static void dh_stop_timer(struct dh_tracker *tracker)
+{
+	if (del_timer(&tracker->timer)) {
+		DEBUGP("dh_stop_timer: helper %s timer stopped\n",
+		       tracker->proto);
+	}
+}
+
+/****************************************************************************/
+static void dh_release_packets(unsigned long mark);
+static void dh_timer_handler(unsigned long ul_tracker)
+{
+	struct dh_tracker *tracker = (void *) ul_tracker;
+
+	/* Prevent dh_target from queuing more packets */
+	write_lock_bh(&queue_lock);
+	write_lock_bh(&dh_lock);
+
+	switch(tracker->stat) {
+	case DH_STAT_LOADED:
+		tracker->stat = DH_STAT_RUNNING;
+		if (tracker->refcount == 0)
+			dh_start_timer(tracker, 0);
+		break;
+	case DH_STAT_LOADING:
+	case DH_STAT_RUNNING:
+		DEBUGP("dh_timer_handler: helper %s %stimed out\n",
+		       tracker->proto,
+		       tracker->stat == DH_STAT_LOADING? "loading " : "");
+		dh_unload_helper(tracker);
+		tracker->stat = DH_STAT_UNLOADED;
+		tracker->module = NULL;
+		tracker->refcount = 0;
+		break;
+	}
+
+	write_unlock_bh(&dh_lock);
+
+	DEBUGP("dh_timer_handler: release packets for helper %s\n",
+	       tracker->proto);
+	dh_release_packets(ul_tracker);
+
+	write_unlock_bh(&queue_lock);
+}
+
+/****************************************************************************/
+static struct dh_tracker *dh_create_tracker(struct xt_dynahelper_info *info)
+{
+	struct dh_tracker *tracker;
+
+	tracker = kmalloc(sizeof(struct dh_tracker), GFP_ATOMIC);
+	if (!tracker) {
+		if (net_ratelimit())
+			printk(KERN_ERR "xt_DYNAHELPER: OOM\n");
+		return NULL;
+	}
+	memset(tracker, 0, sizeof(struct dh_tracker));
+	strcpy(tracker->proto, info->proto);
+	setup_timer(&tracker->timer, dh_timer_handler, (unsigned long)tracker);
+	list_add(&tracker->list, &dh_trackers);
+	DEBUGP("xt_DYNAHELPER: tracker for helper %s created\n",
+	       tracker->proto);
+
+	return tracker;
+}
+
+/****************************************************************************/
+static void dh_destroy_trackers(void)
+{
+	struct dh_tracker *tracker;
+	struct dh_tracker *tmp;
+
+	list_for_each_entry_safe(tracker, tmp, &dh_trackers, list) {
+		list_del(&tracker->list);
+		del_timer(&tracker->timer);
+		kfree(tracker);
+	}
+}
+
+/****************************************************************************/
+static inline struct dh_tracker *dh_find_tracker_by_proto(char *proto)
+{
+	struct dh_tracker *tracker;
+
+	list_for_each_entry(tracker, &dh_trackers, list) {
+		if (strcmp(tracker->proto, proto) == 0)
+			return tracker;
+	}
+	return NULL;
+}
+
+/****************************************************************************/
+static inline struct dh_tracker *dh_find_tracker_by_mark(unsigned long mark)
+{
+	struct dh_tracker *tracker;
+
+	list_for_each_entry(tracker, &dh_trackers, list) {
+		if (tracker == (struct dh_tracker*)mark)
+			return tracker;
+	}
+	return NULL;
+}
+
+/****************************************************************************/
+static inline struct dh_tracker *dh_find_tracker_by_module(struct module *m)
+{
+	struct dh_tracker *tracker;
+
+	list_for_each_entry(tracker, &dh_trackers, list) {
+		if (tracker->stat != DH_STAT_UNLOADED && tracker->module == m)
+			return tracker;
+	}
+	return NULL;
+}
+
+/****************************************************************************/
+static unsigned int dh_target(struct sk_buff **pskb,
+			      const struct net_device *in,
+			      const struct net_device *out,
+			      unsigned int hooknum,
+			      const struct xt_target *target,
+			      const void *targinfo)
+{
+	struct xt_dynahelper_info *info =
+	    (struct xt_dynahelper_info *) targinfo;
+	struct dh_tracker *tracker = info->tracker;
+
+	DEBUGP("xt_DYNAHELPER: target: tracker=%p, timeout=%lu, proto=%s\n",
+	       tracker, info->timeout, info->proto);
+
+	/* Other threads may be releasing the queue */
+	write_lock_bh(&queue_lock);
+	write_lock_bh(&dh_lock);
+
+	/* Is the user space daemon runing? */
+	if (!dh_pid) {
+		DEBUGP("xt_DYNAHELPER: dynahelper not running\n");
+		goto pass_it;
+	}
+
+	/* Lookup by proto name */
+	if (!tracker) {
+		tracker = dh_find_tracker_by_proto(info->proto);
+		if (!tracker) {	/* We need to create a new tracker */
+			tracker = dh_create_tracker(info);
+			if (!tracker)
+				goto pass_it;
+			info->tracker = (void *) tracker;
+		}
+	}
+
+	switch (tracker->stat) {
+	case DH_STAT_RUNNING:
+		DEBUGP("xt_DYNAHELPER: helper %s is ready, let packet go\n",
+		       tracker->proto);
+		goto pass_it;
+	case DH_STAT_LOADED:
+	case DH_STAT_LOADING:
+		DEBUGP("xt_DYNAHELPER: helper %s not ready, queue packet\n",
+		       tracker->proto);
+		goto queue_it;
+	case DH_STAT_UNLOADED:
+		DEBUGP("xt_DYNAHELPER: helper %s not loaded, queue packet\n",
+		       tracker->proto);
+		tracker->stat = DH_STAT_LOADING;
+		dh_load_helper(tracker);
+		if (tracker->timeout != info->timeout)
+			tracker->timeout = info->timeout;
+		/* Wait at most 1 second for loading helper */
+		dh_start_timer(tracker, HZ);
+		goto queue_it;
+	}
+
+pass_it:
+	write_unlock_bh(&dh_lock);
+	write_unlock_bh(&queue_lock);
+	return XT_CONTINUE;
+
+queue_it:
+	write_unlock_bh(&dh_lock);
+	write_unlock_bh(&queue_lock);
+	(*pskb)->mark = (unsigned long) tracker;
+	(*pskb)->ipvs_property = 1;
+	return NF_QUEUE;
+}
+
+/****************************************************************************/
+static int dh_checkentry(const char *tablename, const void *e,
+	       		 const struct xt_target *target, void *targinfo,
+	       		 unsigned int hook_mask)
+{
+	DEBUGP("xt_DYNAHELPER: checkentry\n");
+
+	return 1;
+}
+
+/****************************************************************************/
+static void dh_track(struct module *m)
+{
+	char *proto;
+	struct dh_tracker *tracker;
+
+	if (!m)
+		return;
+
+	if (strncmp(m->name, "nf_conntrack_", 13))
+		return;
+	proto = &m->name[13];
+
+	write_lock_bh(&dh_lock);
+
+	tracker = dh_find_tracker_by_proto(proto);
+	if (tracker &&
+	    tracker->stat == DH_STAT_LOADING && tracker->module != m) {
+		DEBUGP("dh_track: helper %s registered\n", proto);
+		tracker->module = m;
+		tracker->stat = DH_STAT_LOADED;
+		dh_start_timer(tracker, 1); /* release packets next interrupt */
+	}
+
+	write_unlock_bh(&dh_lock);
+}
+
+/****************************************************************************/
+static void dh_untrack(struct module *m)
+{
+	struct dh_tracker *tracker;
+
+	if (!m)
+		return;
+
+	write_lock_bh(&dh_lock);
+
+	tracker = dh_find_tracker_by_module(m);
+	if (tracker) {
+		DEBUGP("dh_untrack: helper %s unregistered\n", tracker->proto);
+		tracker->refcount = 0;
+		tracker->module = NULL;
+		tracker->stat = DH_STAT_UNLOADED;
+		dh_stop_timer(tracker);
+	}
+
+	write_unlock_bh(&dh_lock);
+}
+
+/****************************************************************************/
+static void dh_ref(struct module *m)
+{
+	struct dh_tracker *tracker;
+
+	if (!m)
+		return;
+
+	write_lock_bh(&dh_lock);
+
+	tracker = dh_find_tracker_by_module(m);
+	if (tracker) {
+		DEBUGP("dh_ref: helper %s referenced\n", tracker->proto);
+		tracker->refcount++;
+		dh_stop_timer(tracker);
+	}
+
+	write_unlock_bh(&dh_lock);
+}
+
+/****************************************************************************/
+static void dh_unref(struct module *m)
+{
+	struct dh_tracker *tracker;
+
+	if (!m)
+		return;
+
+	write_lock_bh(&dh_lock);
+
+	tracker = dh_find_tracker_by_module(m);
+	if (tracker) {
+		DEBUGP("dh_unref: helper %s unreferenced\n", tracker->proto);
+		if (tracker->refcount) {
+			tracker->refcount--;
+			if (!tracker->refcount)
+				dh_start_timer(tracker, 0);
+		}
+	}
+
+	write_unlock_bh(&dh_lock);
+}
+
+/****************************************************************************/
+static inline int mark_cmp(struct ipq_queue_entry *e, unsigned long mark)
+{
+	return e->skb->mark == mark;
+}
+
+/****************************************************************************/
+static void dh_release_packets(unsigned long mark)
+{
+	struct ipq_queue_entry *entry;
+
+	while((entry = __ipq_find_dequeue_entry(mark_cmp, mark))) {
+		entry->skb->mark = 0;
+		entry->skb->ipvs_property = 0;
+		ipq_issue_verdict(entry, NF_ACCEPT);
+	}
+}
+
+/****************************************************************************/
+static void dh_receive_msg(struct sk_buff *skb)
+{
+	struct nlmsghdr *nlh;
+
+	DEBUGP("dh_receive_msg: received message\n");
+	if (skb->len < NLMSG_SPACE(sizeof(struct ipq_peer_msg)))
+		return;
+
+	nlh = (struct nlmsghdr *) skb->data;
+	if (nlh->nlmsg_len < NLMSG_LENGTH(sizeof(struct ipq_peer_msg)))
+		return;
+
+	write_lock_bh(&dh_lock);
+
+	if (nlh->nlmsg_pid && nlh->nlmsg_pid != dh_pid) {
+		dh_pid = nlh->nlmsg_pid;
+		DEBUGP("dh_receive_msg: dynahelper %d connected\n", dh_pid);
+	}
+
+	write_unlock_bh(&dh_lock);
+}
+
+/****************************************************************************/
+static void dh_receive_handler(struct sock *sk, int len)
+{
+	do {
+		struct sk_buff *skb;
+
+		if (down_trylock(&dhnl_sem))
+			return;
+
+		while ((skb = skb_dequeue(&sk->sk_receive_queue)) != NULL) {
+			dh_receive_msg(skb);
+			kfree_skb(skb);
+		}
+
+		up(&dhnl_sem);
+
+	} while (dhnl && dhnl->sk_receive_queue.qlen);
+}
+
+/****************************************************************************/
+static int dh_event_handler(struct notifier_block *this, unsigned long event,
+			    void *ptr)
+{
+	struct netlink_notify *n = ptr;
+
+	if (event == NETLINK_URELEASE && n->protocol == NETLINK_DYNAHELPER &&
+	    n->pid) {
+		write_lock_bh(&dh_lock);
+		if (n->pid == dh_pid) {
+			DEBUGP("dh_event_handler: dynahelper terminated\n");
+			dh_pid = 0;
+		}
+		write_unlock_bh(&dh_lock);
+	}
+	return NOTIFY_DONE;
+}
+
+/****************************************************************************/
+static struct xt_target xt_dynahelper_reg = {
+	.name = "DYNAHELPER",
+	.family = AF_INET,
+	.target = dh_target,
+	.targetsize = sizeof(struct xt_dynahelper_info),
+	.table = "raw",
+	.hooks = (1 << NF_IP_PRE_ROUTING) | (1 << NF_IP_LOCAL_OUT),
+	.checkentry = dh_checkentry,
+	.me = THIS_MODULE,
+};
+#endif /* CONFIG_MIPS_BRCM */
+
 static struct notifier_block ipq_dev_notifier = {
 	.notifier_call	= ipq_rcv_dev_event,
 };
@@ -582,6 +1059,10 @@ ipq_rcv_nl_event(struct notifier_block *
 {
 	struct netlink_notify *n = ptr;
 
+#if defined(CONFIG_MIPS_BRCM)
+	dh_event_handler(this, event, ptr);
+#endif /* CONFIG_MIPS_BRCM */
+
 	if (event == NETLINK_URELEASE &&
 	    n->protocol == NETLINK_FIREWALL && n->pid) {
 		write_lock_bh(&queue_lock);
@@ -700,8 +1181,40 @@ static int __init ip_queue_init(void)
 		printk(KERN_ERR "ip_queue: failed to register queue handler\n");
 		goto cleanup_sysctl;
 	}
+
+#if defined(CONFIG_MIPS_BRCM)
+	dhnl = netlink_kernel_create(NETLINK_DYNAHELPER, 0,
+				     dh_receive_handler, THIS_MODULE);
+	if (dhnl == NULL) {
+		printk(KERN_ERR "ip_queue_init: failed to create dynahelper "
+		       "netlink socket\n");
+		goto cleanup_sysctl;
+	}
+
+	status = xt_register_target(&xt_dynahelper_reg);
+	if (status < 0) {
+		printk(KERN_ERR "ip_queue_init: failed to register dynahelper "
+		       "target\n");
+		goto cleanup_dh_netlink;
+	}
+
+        /* Set hooks */
+	dynahelper_track = dh_track; 
+	dynahelper_untrack = dh_untrack;
+	dynahelper_ref = dh_ref;
+	dynahelper_unref = dh_unref;
+#endif /* CONFIG_MIPS_BRCM */
+
 	return status;
 
+#if defined(CONFIG_MIPS_BRCM)
+cleanup_dh_netlink:
+	sock_release(dhnl->sk_socket);
+	down(&dhnl_sem);
+	up(&dhnl_sem);
+	dh_destroy_trackers();
+#endif /* CONFIG_MIPS_BRCM */
+
 cleanup_sysctl:
 	unregister_sysctl_table(ipq_sysctl_header);
 	unregister_netdevice_notifier(&ipq_dev_notifier);
@@ -719,6 +1232,19 @@ cleanup_netlink_notifier:
 
 static void __exit ip_queue_fini(void)
 {
+#if defined(CONFIG_MIPS_BRCM)
+	dynahelper_track = NULL;
+	dynahelper_untrack = NULL;
+	dynahelper_ref = NULL;
+	dynahelper_unref = NULL;
+	xt_unregister_target(&xt_dynahelper_reg);
+
+	sock_release(dhnl->sk_socket);
+	down(&dhnl_sem);
+	up(&dhnl_sem);
+	dh_destroy_trackers();
+#endif /* CONFIG_MIPS_BRCM */
+
 	nf_unregister_queue_handlers(&nfqh);
 	synchronize_net();
 	ipq_flush(NF_DROP);
--- a/net/ipv4/netfilter/Kconfig
+++ b/net/ipv4/netfilter/Kconfig
@@ -399,6 +399,12 @@ config NF_NAT_NEEDED
 	depends on NF_NAT
 	default y
 
+config IP_NF_NAT_CACHE
+        tristate "NAT CACHE"
+        depends on IP_NF_NAT
+
+        default m
+
 config IP_NF_TARGET_MASQUERADE
 	tristate "MASQUERADE target support"
 	depends on (NF_NAT || IP_NF_NAT)
