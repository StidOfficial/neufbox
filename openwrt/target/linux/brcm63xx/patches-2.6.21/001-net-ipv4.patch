diff --exclude=.svn -pNur linux-2.6.21.7/net/ipv4/af_inet.c linux-2.6.21.7/net/ipv4/af_inet.c
--- linux-2.6.21.7/net/ipv4/af_inet.c	2007-08-04 18:11:13.000000000 +0200
+++ linux-2.6.21.7/net/ipv4/af_inet.c	2008-10-13 18:23:39.000000000 +0200
@@ -736,6 +736,10 @@ int inet_shutdown(struct socket *sock, i
 	return err;
 }
 
+#if defined(CONFIG_MIPS_BRCM)
+#define SIOCGEXTIF	0x8908
+#endif
+
 /*
  *	ioctl() calls you can issue on an INET socket. Most of these are
  *	device configuration and stuff and very rarely used. Some ioctls
@@ -763,8 +767,14 @@ int inet_ioctl(struct socket *sock, unsi
 		case SIOCDARP:
 		case SIOCGARP:
 		case SIOCSARP:
+		case SIOCSDMZ: // Keven -- super DMZ
 			err = arp_ioctl(cmd, (void __user *)arg);
 			break;
+#if defined(CONFIG_MIPS_BRCM)
+		case SIOCGEXTIF:
+			err = sock_get_extif(sk, (char __user *)arg);
+			break;
+#endif
 		case SIOCGIFADDR:
 		case SIOCSIFADDR:
 		case SIOCGIFBRDADDR:
diff --exclude=.svn -pNur linux-2.6.21.7/net/ipv4/ah4.c linux-2.6.21.7/net/ipv4/ah4.c
--- linux-2.6.21.7/net/ipv4/ah4.c	2007-08-04 18:11:13.000000000 +0200
+++ linux-2.6.21.7/net/ipv4/ah4.c	2008-10-14 09:33:46.000000000 +0200
@@ -9,6 +9,40 @@
 #include <net/protocol.h>
 #include <asm/scatterlist.h>
 
+#if defined(CONFIG_MIPS_BRCM)
+#if defined(CONFIG_BCM_SPU) || defined(CONFIG_BCM_SPU_MODULE)
+
+#undef DUMP_DATA
+#undef FULL_DEBUG
+
+extern int BcmAh4InitState(struct xfrm_state *x, struct xfrm_algo_desc *aalg );
+extern int BcmProcessOutbound(struct sk_buff *skb, void *hwctx, int flag);
+extern int BcmProcessInbound(struct sk_buff *skb, void *hwctx, int flag);
+
+static void AHDataDump(char * msg, void *buf, int len)
+{
+        int n;
+        uint8_t *p = (uint8_t *)buf;
+
+        printk("\n%s: %p %d (%02x) bytes\n", msg, buf, len, len);
+        for (n=0; n < len && n < 256; n++) {
+                printk("%02x ", *p++);
+                if (!((n+1)%16))
+                        printk("\n");
+        }
+        printk("\n");
+}
+
+void AHDump_skb (unsigned char * msg, struct sk_buff *s)
+{
+        // Looking at it as skb
+        printk ("skb %p: data %p tail %p len %d:%d", s, s->data, s->tail, s->len, s->tail - s->data);
+        printk (" nheader %p ", s->nh.iph);
+        //printk ("head %p end %p", s, s->head, s->end);
+        AHDataDump (msg, s->data, s->len);
+}
+#endif // CONFIG_CRYPTO_HW_OFFLOAD
+#endif // CONFIG_MIPS_BRCM
 
 /* Clear mutable options and find final destination to substitute
  * into IP header for icv calculation. Options are already checked
@@ -65,6 +99,27 @@ static int ah_output(struct xfrm_state *
 		char 		buf[60];
 	} tmp_iph;
 
+#if defined(CONFIG_MIPS_BRCM)
+#if defined(CONFIG_BCM_SPU) || defined(CONFIG_BCM_SPU_MODULE)
+	unsigned short hdrlen;
+	AHDataDump("AH Output Ingress data", skb->data, skb->len);
+	AHDump_skb("ah_output Ingress", skb);
+
+	ahp = x->data;
+	printk ("ah_output: ahp %p hwctx %p\n", ahp, ahp->hwctx);
+	hdrlen = sizeof(struct iphdr) +
+		XFRM_ALIGN8(sizeof(struct ip_auth_hdr) +
+		ahp->icv_trunc_len);
+	printk ("hdrlen %d icv_trunc_len %d ip_auth_hdr %d\n",
+		hdrlen, ahp->icv_trunc_len, sizeof(struct ip_auth_hdr));
+	__skb_pull(skb, hdrlen);
+	AHDump_skb("ah_out in after skb_pull", skb);
+	printk ("ah_output: Calling BcmProcessOutbound skb %p hwctx %p\n",
+		skb, ahp->hwctx);
+	err = BcmProcessOutbound (skb, ahp->hwctx, 0);
+	printk ("ah_output: Returned from BcmProcessOutbound err %d\n", err);
+#endif // CONFIG_CRYPTO_HW_OFFLOAD
+#endif // CONFIG_MIPS_BRCM
 	top_iph = skb->nh.iph;
 	iph = &tmp_iph.iph;
 
@@ -111,6 +166,13 @@ static int ah_output(struct xfrm_state *
 		memcpy(top_iph+1, iph+1, top_iph->ihl*4 - sizeof(struct iphdr));
 	}
 
+#if defined(CONFIG_MIPS_BRCM)
+#if defined(CONFIG_BCM_SPU) || defined(CONFIG_BCM_SPU_MODULE)
+#ifdef DUMP_DATA
+	AHDump_skb("ah_output Egress skb", skb);
+#endif
+#endif // CONFIG_CRYPTO_HW_OFFLOAD
+#endif // CONFIG_MIPS_BRCM
 	ip_send_check(top_iph);
 
 	err = 0;
@@ -129,6 +191,15 @@ static int ah_input(struct xfrm_state *x
 	struct ah_data *ahp;
 	char work_buf[60];
 
+#if defined(CONFIG_MIPS_BRCM)
+#if defined(CONFIG_BCM_SPU) || defined(CONFIG_BCM_SPU_MODULE)
+#ifdef DUMP_DATA
+	AHDataDump("AH Ingress skb", skb->data, skb->len);
+	AHDump_skb("ah_input Ingress", skb);
+#endif
+#endif // CONFIG_CRYPTO_HW_OFFLOAD
+#endif // CONFIG_MIPS_BRCM
+
 	if (!pskb_may_pull(skb, sizeof(struct ip_auth_hdr)))
 		goto out;
 
@@ -184,6 +255,15 @@ static int ah_input(struct xfrm_state *x
 	skb->h.raw = memcpy(skb->nh.raw += ah_hlen, work_buf, ihl);
 	__skb_pull(skb, ah_hlen + ihl);
 
+done:
+#if defined(CONFIG_MIPS_BRCM)
+#if defined(CONFIG_BCM_SPU) || defined(CONFIG_BCM_SPU_MODULE)
+#ifdef DUMP_DATA
+	AHDump_skb("ah_input return Egress skb", skb);
+#endif
+#endif // CONFIG_CRYPTO_HW_OFFLOAD
+#endif // CONFIG_MIPS_BRCM
+
 	return 0;
 
 out:
@@ -269,6 +349,16 @@ static int ah_init_state(struct xfrm_sta
 		x->props.header_len += sizeof(struct iphdr);
 	x->data = ahp;
 
+#if defined(CONFIG_MIPS_BRCM)
+#if defined(CONFIG_BCM_SPU) || defined(CONFIG_BCM_SPU_MODULE)
+	printk ("ah_init_state: Calling BcmAh4InitState x %p\n", x);
+        if (BcmAh4InitState(x,
+                        xfrm_aalg_get_byname(x->aalg->alg_name, 0))) {
+                return -EINVAL;
+        }
+	printk ("ah_init_state: Returned from BcmAh4InitState\n");
+#endif // CONFIG_CRYPTO_HW_OFFLOAD
+#endif // CONFIG_MIPS_BRCM
 	return 0;
 
 error:
@@ -287,6 +377,16 @@ static void ah_destroy(struct xfrm_state
 	if (!ahp)
 		return;
 
+#if defined(CONFIG_MIPS_BRCM)
+#if defined(CONFIG_BCM_SPU) || defined(CONFIG_BCM_SPU_MODULE)
+        if(ahp->hwctx) {
+                printk("Calling Destroy with hwctx %p\n", ahp->hwctx);
+                BcmDestroyContext(ahp->hwctx);
+                ahp->hwctx = NULL;
+        }
+#endif // CONFIG_CRYPTO_HW_OFFLOAD
+#endif // CONFIG_MIPS_BRCM
+
 	kfree(ahp->work_icv);
 	ahp->work_icv = NULL;
 	crypto_free_hash(ahp->tfm);
@@ -323,6 +423,11 @@ static int __init ah4_init(void)
 		xfrm_unregister_type(&ah_type, AF_INET);
 		return -EAGAIN;
 	}
+#if defined(CONFIG_MIPS_BRCM)
+#if defined(CONFIG_BCM_SPU) || defined(CONFIG_BCM_SPU_MODULE)
+	printk(KERN_INFO "Ah4 module with HW offload\n");
+#endif // CONFIG_CRYPTO_HW_OFFLOAD
+#endif // CONFIG_MIPS_BRCM
 	return 0;
 }
 
diff --exclude=.svn -pNur linux-2.6.21.7/net/ipv4/ip_input.c linux-2.6.21.7/net/ipv4/ip_input.c
--- linux-2.6.21.7/net/ipv4/ip_input.c	2007-08-04 18:11:13.000000000 +0200
+++ linux-2.6.21.7/net/ipv4/ip_input.c	2008-10-14 09:32:57.000000000 +0200
@@ -145,6 +145,9 @@
 #include <net/xfrm.h>
 #include <linux/mroute.h>
 #include <linux/netlink.h>
+#if defined (CONFIG_MIPS_BRCM)
+#include <linux/blog.h>
+#endif
 
 /*
  *	SNMP management statistics
@@ -262,6 +265,12 @@ static inline int ip_local_deliver_finis
  */
 int ip_local_deliver(struct sk_buff *skb)
 {
+
+/* do not track locally delivered packets */
+#if defined (CONFIG_MIPS_BRCM)
+	blog_skip(skb);
+#endif
+
 	/*
 	 *	Reassemble IP fragments.
 	 */
diff --exclude=.svn -pNur linux-2.6.21.7/net/ipv4/netfilter/ip_queue.c linux-2.6.21.7/net/ipv4/netfilter/ip_queue.c
--- linux-2.6.21.7/net/ipv4/netfilter/ip_queue.c	2007-08-04 18:11:13.000000000 +0200
+++ linux-2.6.21.7/net/ipv4/netfilter/ip_queue.c	2008-10-13 18:23:39.000000000 +0200
@@ -288,7 +288,11 @@ ipq_enqueue_packet(struct sk_buff *skb, 
 	struct sk_buff *nskb;
 	struct ipq_queue_entry *entry;
 
+#if defined(CONFIG_MIPS_BRCM)
+	if (copy_mode == IPQ_COPY_NONE && !skb->ipvs_property)
+	#else
 	if (copy_mode == IPQ_COPY_NONE)
+#endif /* CONFIG_MIPS_BRCM */
 		return -EAGAIN;
 
 	entry = kmalloc(sizeof(*entry), GFP_ATOMIC);
@@ -296,10 +300,22 @@ ipq_enqueue_packet(struct sk_buff *skb, 
 		printk(KERN_ERR "ip_queue: OOM in ipq_enqueue_packet()\n");
 		return -ENOMEM;
 	}
+#if defined(CONFIG_MIPS_BRCM) && 0
+	        skb->nat_cache_add = NULL;
+#endif
 
 	entry->info = info;
 	entry->skb = skb;
 
+#if defined(CONFIG_MIPS_BRCM)
+	if (skb->ipvs_property) {
+		write_lock_bh(&queue_lock);
+		__ipq_enqueue_entry(entry);
+		write_unlock_bh(&queue_lock);
+		return 1;
+	}
+#endif /* CONFIG_MIPS_BRCM */
+
 	nskb = ipq_build_packet_message(entry, &status);
 	if (nskb == NULL)
 		goto err_out_free;
@@ -572,6 +588,467 @@ ipq_rcv_dev_event(struct notifier_block 
 	return NOTIFY_DONE;
 }
 
+#if defined(CONFIG_MIPS_BRCM)
+#if 1
+#define DEBUGP printk
+#else
+#define DEBUGP(format, args...)
+#endif /* CONFIG_MIPS_BRCM */
+
+/* Dynahelper tracker status */
+#define DH_STAT_UNLOADED 0
+#define DH_STAT_LOADING 1
+#define DH_STAT_LOADED 2
+#define DH_STAT_RUNNING 3
+
+struct dh_tracker {
+	struct list_head list;
+	char proto[DYNAHELPER_MAXPROTONAMELEN + 1];
+	unsigned long timeout;
+	int stat;
+	u_int32_t refcount;
+	struct module *module;
+	struct timer_list timer;
+};
+
+extern void (*dynahelper_track)(struct module * m);
+extern void (*dynahelper_untrack)(struct module * m);
+extern void (*dynahelper_ref)(struct module * m);
+extern void (*dynahelper_unref)(struct module * m);
+
+static rwlock_t dh_lock = RW_LOCK_UNLOCKED;
+static LIST_HEAD(dh_trackers);
+static int dh_pid;
+static struct sock *dhnl;
+static DECLARE_MUTEX(dhnl_sem);
+
+/****************************************************************************/
+static void dh_send_msg(struct dh_tracker *tracker, int type)
+{
+	struct sk_buff *skb;
+	struct nlmsghdr *nlh;
+	struct ipq_packet_msg *pmsg;
+
+	if (!dhnl)
+		return;
+
+	skb = alloc_skb(NLMSG_SPACE(sizeof(*pmsg)), GFP_ATOMIC);
+	if (!skb) {
+		printk(KERN_ERR "dh_send_msg: alloc_skb() error\n");
+		return;
+	}
+	nlh = __nlmsg_put(skb, 0, 0, type, sizeof(*pmsg), 0);
+	pmsg = NLMSG_DATA(nlh);
+	strcpy(pmsg->indev_name, tracker->proto);
+	netlink_unicast(dhnl, skb, dh_pid, MSG_DONTWAIT);
+}
+
+/****************************************************************************/
+static inline void dh_load_helper(struct dh_tracker *tracker)
+{
+	DEBUGP("dh_load_helper: load helper %s\n", tracker->proto);
+	dh_send_msg(tracker, IPQM_DYNAHELPER_LOAD);
+}
+
+/****************************************************************************/
+static inline void dh_unload_helper(struct dh_tracker *tracker)
+{
+	DEBUGP("dh_unload_helper: unload helper %s\n", tracker->proto);
+	dh_send_msg(tracker, IPQM_DYNAHELPER_UNLOAD);
+}
+
+/****************************************************************************/
+static void dh_start_timer(struct dh_tracker *tracker, int timeout)
+{
+	if (timeout == 0) {
+		if ((timeout = tracker->timeout * HZ) == 0)
+			return;
+	}
+
+	mod_timer(&tracker->timer, jiffies + timeout);
+	DEBUGP("dh_start_timer: helper %s timer started\n", tracker->proto);
+}
+
+/****************************************************************************/
+static void dh_stop_timer(struct dh_tracker *tracker)
+{
+	if (del_timer(&tracker->timer)) {
+		DEBUGP("dh_stop_timer: helper %s timer stopped\n",
+		       tracker->proto);
+	}
+}
+
+/****************************************************************************/
+static void dh_release_packets(unsigned long mark);
+static void dh_timer_handler(unsigned long ul_tracker)
+{
+	struct dh_tracker *tracker = (void *) ul_tracker;
+
+	/* Prevent dh_target from queuing more packets */
+	write_lock_bh(&queue_lock);
+	write_lock_bh(&dh_lock);
+
+	switch(tracker->stat) {
+	case DH_STAT_LOADED:
+		tracker->stat = DH_STAT_RUNNING;
+		if (tracker->refcount == 0)
+			dh_start_timer(tracker, 0);
+		break;
+	case DH_STAT_LOADING:
+	case DH_STAT_RUNNING:
+		DEBUGP("dh_timer_handler: helper %s %stimed out\n",
+		       tracker->proto,
+		       tracker->stat == DH_STAT_LOADING? "loading " : "");
+		dh_unload_helper(tracker);
+		tracker->stat = DH_STAT_UNLOADED;
+		tracker->module = NULL;
+		tracker->refcount = 0;
+		break;
+	}
+
+	write_unlock_bh(&dh_lock);
+
+	DEBUGP("dh_timer_handler: release packets for helper %s\n",
+	       tracker->proto);
+	dh_release_packets(ul_tracker);
+
+	write_unlock_bh(&queue_lock);
+}
+
+/****************************************************************************/
+static struct dh_tracker *dh_create_tracker(struct xt_dynahelper_info *info)
+{
+	struct dh_tracker *tracker;
+
+	tracker = kmalloc(sizeof(struct dh_tracker), GFP_ATOMIC);
+	if (!tracker) {
+		if (net_ratelimit())
+			printk(KERN_ERR "xt_DYNAHELPER: OOM\n");
+		return NULL;
+	}
+	memset(tracker, 0, sizeof(struct dh_tracker));
+	strcpy(tracker->proto, info->proto);
+	setup_timer(&tracker->timer, dh_timer_handler, (unsigned long)tracker);
+	list_add(&tracker->list, &dh_trackers);
+	DEBUGP("xt_DYNAHELPER: tracker for helper %s created\n",
+	       tracker->proto);
+
+	return tracker;
+}
+
+/****************************************************************************/
+static void dh_destroy_trackers(void)
+{
+	struct dh_tracker *tracker;
+	struct dh_tracker *tmp;
+
+	list_for_each_entry_safe(tracker, tmp, &dh_trackers, list) {
+		list_del(&tracker->list);
+		del_timer(&tracker->timer);
+		kfree(tracker);
+	}
+}
+
+/****************************************************************************/
+static inline struct dh_tracker *dh_find_tracker_by_proto(char *proto)
+{
+	struct dh_tracker *tracker;
+
+	list_for_each_entry(tracker, &dh_trackers, list) {
+		if (strcmp(tracker->proto, proto) == 0)
+			return tracker;
+	}
+	return NULL;
+}
+
+/****************************************************************************/
+static inline struct dh_tracker *dh_find_tracker_by_mark(unsigned long mark)
+{
+	struct dh_tracker *tracker;
+
+	list_for_each_entry(tracker, &dh_trackers, list) {
+		if (tracker == (struct dh_tracker*)mark)
+			return tracker;
+	}
+	return NULL;
+}
+
+/****************************************************************************/
+static inline struct dh_tracker *dh_find_tracker_by_module(struct module *m)
+{
+	struct dh_tracker *tracker;
+
+	list_for_each_entry(tracker, &dh_trackers, list) {
+		if (tracker->stat != DH_STAT_UNLOADED && tracker->module == m)
+			return tracker;
+	}
+	return NULL;
+}
+
+/****************************************************************************/
+static unsigned int dh_target(struct sk_buff **pskb,
+			      const struct net_device *in,
+			      const struct net_device *out,
+			      unsigned int hooknum,
+			      const struct xt_target *target,
+			      const void *targinfo)
+{
+	struct xt_dynahelper_info *info =
+	    (struct xt_dynahelper_info *) targinfo;
+	struct dh_tracker *tracker = info->tracker;
+
+	DEBUGP("xt_DYNAHELPER: target: tracker=%p, timeout=%lu, proto=%s\n",
+	       tracker, info->timeout, info->proto);
+
+	/* Other threads may be releasing the queue */
+	write_lock_bh(&queue_lock);
+	write_lock_bh(&dh_lock);
+
+	/* Is the user space daemon runing? */
+	if (!dh_pid) {
+		DEBUGP("xt_DYNAHELPER: dynahelper not running\n");
+		goto pass_it;
+	}
+
+	/* Lookup by proto name */
+	if (!tracker) {
+		tracker = dh_find_tracker_by_proto(info->proto);
+		if (!tracker) {	/* We need to create a new tracker */
+			tracker = dh_create_tracker(info);
+			if (!tracker)
+				goto pass_it;
+			info->tracker = (void *) tracker;
+		}
+	}
+
+	switch (tracker->stat) {
+	case DH_STAT_RUNNING:
+		DEBUGP("xt_DYNAHELPER: helper %s is ready, let packet go\n",
+		       tracker->proto);
+		goto pass_it;
+	case DH_STAT_LOADED:
+	case DH_STAT_LOADING:
+		DEBUGP("xt_DYNAHELPER: helper %s not ready, queue packet\n",
+		       tracker->proto);
+		goto queue_it;
+	case DH_STAT_UNLOADED:
+		DEBUGP("xt_DYNAHELPER: helper %s not loaded, queue packet\n",
+		       tracker->proto);
+		tracker->stat = DH_STAT_LOADING;
+		dh_load_helper(tracker);
+		if (tracker->timeout != info->timeout)
+			tracker->timeout = info->timeout;
+		/* Wait at most 1 second for loading helper */
+		dh_start_timer(tracker, HZ);
+		goto queue_it;
+	}
+
+pass_it:
+	write_unlock_bh(&dh_lock);
+	write_unlock_bh(&queue_lock);
+	return XT_CONTINUE;
+
+queue_it:
+	write_unlock_bh(&dh_lock);
+	write_unlock_bh(&queue_lock);
+	(*pskb)->mark = (unsigned long) tracker;
+	(*pskb)->ipvs_property = 1;
+	return NF_QUEUE;
+}
+
+/****************************************************************************/
+static int dh_checkentry(const char *tablename, const void *e,
+	       		 const struct xt_target *target, void *targinfo,
+	       		 unsigned int hook_mask)
+{
+	DEBUGP("xt_DYNAHELPER: checkentry\n");
+
+	return 1;
+}
+
+/****************************************************************************/
+static void dh_track(struct module *m)
+{
+	char *proto;
+	struct dh_tracker *tracker;
+
+	if (!m)
+		return;
+
+	if (strncmp(m->name, "nf_conntrack_", 13))
+		return;
+	proto = &m->name[13];
+
+	write_lock_bh(&dh_lock);
+
+	tracker = dh_find_tracker_by_proto(proto);
+	if (tracker &&
+	    tracker->stat == DH_STAT_LOADING && tracker->module != m) {
+		DEBUGP("dh_track: helper %s registered\n", proto);
+		tracker->module = m;
+		tracker->stat = DH_STAT_LOADED;
+		dh_start_timer(tracker, 1); /* release packets next interrupt */
+	}
+
+	write_unlock_bh(&dh_lock);
+}
+
+/****************************************************************************/
+static void dh_untrack(struct module *m)
+{
+	struct dh_tracker *tracker;
+
+	if (!m)
+		return;
+
+	write_lock_bh(&dh_lock);
+
+	tracker = dh_find_tracker_by_module(m);
+	if (tracker) {
+		DEBUGP("dh_untrack: helper %s unregistered\n", tracker->proto);
+		tracker->refcount = 0;
+		tracker->module = NULL;
+		tracker->stat = DH_STAT_UNLOADED;
+		dh_stop_timer(tracker);
+	}
+
+	write_unlock_bh(&dh_lock);
+}
+
+/****************************************************************************/
+static void dh_ref(struct module *m)
+{
+	struct dh_tracker *tracker;
+
+	if (!m)
+		return;
+
+	write_lock_bh(&dh_lock);
+
+	tracker = dh_find_tracker_by_module(m);
+	if (tracker) {
+		DEBUGP("dh_ref: helper %s referenced\n", tracker->proto);
+		tracker->refcount++;
+		dh_stop_timer(tracker);
+	}
+
+	write_unlock_bh(&dh_lock);
+}
+
+/****************************************************************************/
+static void dh_unref(struct module *m)
+{
+	struct dh_tracker *tracker;
+
+	if (!m)
+		return;
+
+	write_lock_bh(&dh_lock);
+
+	tracker = dh_find_tracker_by_module(m);
+	if (tracker) {
+		DEBUGP("dh_unref: helper %s unreferenced\n", tracker->proto);
+		if (tracker->refcount) {
+			tracker->refcount--;
+			if (!tracker->refcount)
+				dh_start_timer(tracker, 0);
+		}
+	}
+
+	write_unlock_bh(&dh_lock);
+}
+
+/****************************************************************************/
+static inline int mark_cmp(struct ipq_queue_entry *e, unsigned long mark)
+{
+	return e->skb->mark == mark;
+}
+
+/****************************************************************************/
+static void dh_release_packets(unsigned long mark)
+{
+	struct ipq_queue_entry *entry;
+
+	while((entry = __ipq_find_dequeue_entry(mark_cmp, mark))) {
+		entry->skb->mark = 0;
+		entry->skb->ipvs_property = 0;
+		ipq_issue_verdict(entry, NF_ACCEPT);
+	}
+}
+
+/****************************************************************************/
+static void dh_receive_msg(struct sk_buff *skb)
+{
+	struct nlmsghdr *nlh;
+
+	DEBUGP("dh_receive_msg: received message\n");
+	if (skb->len < NLMSG_SPACE(sizeof(struct ipq_peer_msg)))
+		return;
+
+	nlh = (struct nlmsghdr *) skb->data;
+	if (nlh->nlmsg_len < NLMSG_LENGTH(sizeof(struct ipq_peer_msg)))
+		return;
+
+	write_lock_bh(&dh_lock);
+
+	if (nlh->nlmsg_pid && nlh->nlmsg_pid != dh_pid) {
+		dh_pid = nlh->nlmsg_pid;
+		DEBUGP("dh_receive_msg: dynahelper %d connected\n", dh_pid);
+	}
+
+	write_unlock_bh(&dh_lock);
+}
+
+/****************************************************************************/
+static void dh_receive_handler(struct sock *sk, int len)
+{
+	do {
+		struct sk_buff *skb;
+
+		if (down_trylock(&dhnl_sem))
+			return;
+
+		while ((skb = skb_dequeue(&sk->sk_receive_queue)) != NULL) {
+			dh_receive_msg(skb);
+			kfree_skb(skb);
+		}
+
+		up(&dhnl_sem);
+
+	} while (dhnl && dhnl->sk_receive_queue.qlen);
+}
+
+/****************************************************************************/
+static int dh_event_handler(struct notifier_block *this, unsigned long event,
+			    void *ptr)
+{
+	struct netlink_notify *n = ptr;
+
+	if (event == NETLINK_URELEASE && n->protocol == NETLINK_DYNAHELPER &&
+	    n->pid) {
+		write_lock_bh(&dh_lock);
+		if (n->pid == dh_pid) {
+			DEBUGP("dh_event_handler: dynahelper terminated\n");
+			dh_pid = 0;
+		}
+		write_unlock_bh(&dh_lock);
+	}
+	return NOTIFY_DONE;
+}
+
+/****************************************************************************/
+static struct xt_target xt_dynahelper_reg = {
+	.name = "DYNAHELPER",
+	.family = AF_INET,
+	.target = dh_target,
+	.targetsize = sizeof(struct xt_dynahelper_info),
+	.table = "raw",
+	.hooks = (1 << NF_IP_PRE_ROUTING) | (1 << NF_IP_LOCAL_OUT),
+	.checkentry = dh_checkentry,
+	.me = THIS_MODULE,
+};
+#endif /* CONFIG_MIPS_BRCM */
+
 static struct notifier_block ipq_dev_notifier = {
 	.notifier_call	= ipq_rcv_dev_event,
 };
@@ -582,6 +1059,10 @@ ipq_rcv_nl_event(struct notifier_block *
 {
 	struct netlink_notify *n = ptr;
 
+#if defined(CONFIG_MIPS_BRCM)
+	dh_event_handler(this, event, ptr);
+#endif /* CONFIG_MIPS_BRCM */
+
 	if (event == NETLINK_URELEASE &&
 	    n->protocol == NETLINK_FIREWALL && n->pid) {
 		write_lock_bh(&queue_lock);
@@ -700,8 +1181,40 @@ static int __init ip_queue_init(void)
 		printk(KERN_ERR "ip_queue: failed to register queue handler\n");
 		goto cleanup_sysctl;
 	}
+
+#if defined(CONFIG_MIPS_BRCM)
+	dhnl = netlink_kernel_create(NETLINK_DYNAHELPER, 0,
+				     dh_receive_handler, THIS_MODULE);
+	if (dhnl == NULL) {
+		printk(KERN_ERR "ip_queue_init: failed to create dynahelper "
+		       "netlink socket\n");
+		goto cleanup_sysctl;
+	}
+
+	status = xt_register_target(&xt_dynahelper_reg);
+	if (status < 0) {
+		printk(KERN_ERR "ip_queue_init: failed to register dynahelper "
+		       "target\n");
+		goto cleanup_dh_netlink;
+	}
+
+        /* Set hooks */
+	dynahelper_track = dh_track; 
+	dynahelper_untrack = dh_untrack;
+	dynahelper_ref = dh_ref;
+	dynahelper_unref = dh_unref;
+#endif /* CONFIG_MIPS_BRCM */
+
 	return status;
 
+#if defined(CONFIG_MIPS_BRCM)
+cleanup_dh_netlink:
+	sock_release(dhnl->sk_socket);
+	down(&dhnl_sem);
+	up(&dhnl_sem);
+	dh_destroy_trackers();
+#endif /* CONFIG_MIPS_BRCM */
+
 cleanup_sysctl:
 	unregister_sysctl_table(ipq_sysctl_header);
 	unregister_netdevice_notifier(&ipq_dev_notifier);
@@ -719,6 +1232,19 @@ cleanup_netlink_notifier:
 
 static void __exit ip_queue_fini(void)
 {
+#if defined(CONFIG_MIPS_BRCM)
+	dynahelper_track = NULL;
+	dynahelper_untrack = NULL;
+	dynahelper_ref = NULL;
+	dynahelper_unref = NULL;
+	xt_unregister_target(&xt_dynahelper_reg);
+
+	sock_release(dhnl->sk_socket);
+	down(&dhnl_sem);
+	up(&dhnl_sem);
+	dh_destroy_trackers();
+#endif /* CONFIG_MIPS_BRCM */
+
 	nf_unregister_queue_handlers(&nfqh);
 	synchronize_net();
 	ipq_flush(NF_DROP);
diff --exclude=.svn -pNur linux-2.6.21.7/net/ipv4/netfilter/ipt_MASQUERADE.c linux-2.6.21.7/net/ipv4/netfilter/ipt_MASQUERADE.c
--- linux-2.6.21.7/net/ipv4/netfilter/ipt_MASQUERADE.c	2007-08-04 18:11:13.000000000 +0200
+++ linux-2.6.21.7/net/ipv4/netfilter/ipt_MASQUERADE.c	2008-10-13 18:23:39.000000000 +0200
@@ -27,6 +27,15 @@
 #endif
 #include <linux/netfilter/x_tables.h>
 
+#if defined(CONFIG_MIPS_BRCM)
+#include <net/netfilter/nf_conntrack.h>
+#include <net/netfilter/nf_conntrack_core.h>
+#include <net/netfilter/nf_conntrack_helper.h>
+#include <net/netfilter/nf_nat.h>
+#include <net/netfilter/nf_nat_rule.h>
+#include <net/netfilter/nf_nat_helper.h>
+#endif /* CONFIG_MIPS_BRCM */
+
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Netfilter Core Team <coreteam@netfilter.org>");
 MODULE_DESCRIPTION("iptables MASQUERADE target module");
@@ -40,6 +49,121 @@ MODULE_DESCRIPTION("iptables MASQUERADE 
 /* Lock protects masq region inside conntrack */
 static DEFINE_RWLOCK(masq_lock);
 
+#if defined(CONFIG_MIPS_BRCM)
+/****************************************************************************/
+static void bcm_nat_expect(struct nf_conn *ct,
+			   struct nf_conntrack_expect *exp)
+{
+	struct nf_nat_range range;
+
+	/* This must be a fresh one. */
+	BUG_ON(ct->status & IPS_NAT_DONE_MASK);
+
+	/* Change src to where new ct comes from */
+	range.flags = IP_NAT_RANGE_MAP_IPS;
+	range.min_ip = range.max_ip =
+		ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3.ip;
+	nf_nat_setup_info(ct, &range, NF_IP_POST_ROUTING);
+	 
+	/* For DST manip, map port here to where it's expected. */
+	range.flags = (IP_NAT_RANGE_MAP_IPS | IP_NAT_RANGE_PROTO_SPECIFIED);
+	range.min = range.max = exp->saved_proto;
+	range.min_ip = range.max_ip = exp->saved_ip;
+	nf_nat_setup_info(ct, &range, NF_IP_PRE_ROUTING);
+}
+
+/****************************************************************************/
+static int bcm_nat_help(struct sk_buff **pskb, unsigned int protoff,
+			struct nf_conn *ct, enum ip_conntrack_info ctinfo)
+{
+	int dir = CTINFO2DIR(ctinfo);
+	struct nf_conn_help *help = nfct_help(ct);
+	struct nf_conntrack_expect *exp;
+	
+	if (dir != IP_CT_DIR_ORIGINAL || help->expecting)
+		return NF_ACCEPT;
+
+	DEBUGP("bcm_nat: packet[%d bytes] %u.%u.%u.%u:%hu->%u.%u.%u.%u:%hu, "
+	       "reply: %u.%u.%u.%u:%hu->%u.%u.%u.%u:%hu\n",
+	       (*pskb)->len,
+	       NIPQUAD(ct->tuplehash[dir].tuple.src.u3.ip),
+	       ntohs(ct->tuplehash[dir].tuple.src.u.udp.port),
+	       NIPQUAD(ct->tuplehash[dir].tuple.dst.u3.ip),
+	       ntohs(ct->tuplehash[dir].tuple.dst.u.udp.port),
+	       NIPQUAD(ct->tuplehash[!dir].tuple.src.u3.ip),
+	       ntohs(ct->tuplehash[!dir].tuple.src.u.udp.port),
+	       NIPQUAD(ct->tuplehash[!dir].tuple.dst.u3.ip),
+	       ntohs(ct->tuplehash[!dir].tuple.dst.u.udp.port));
+	
+	/* Create expect */
+	if ((exp = nf_conntrack_expect_alloc(ct)) == NULL)
+		return NF_ACCEPT;
+
+	nf_conntrack_expect_init(exp, AF_INET, NULL,
+				 &ct->tuplehash[!dir].tuple.dst.u3,
+				 IPPROTO_UDP, NULL,
+				 &ct->tuplehash[!dir].tuple.dst.u.udp.port);
+	exp->flags = NF_CT_EXPECT_PERMANENT;
+	exp->saved_ip = ct->tuplehash[dir].tuple.src.u3.ip;
+	exp->saved_proto.udp.port = ct->tuplehash[dir].tuple.src.u.udp.port;
+	exp->dir = !dir;
+	exp->expectfn = bcm_nat_expect;
+
+	/* Setup expect */
+	nf_conntrack_expect_related(exp);
+	DEBUGP("bcm_nat: expect setup\n");
+
+	return NF_ACCEPT;
+}
+
+/****************************************************************************/
+static struct nf_conntrack_helper nf_conntrack_helper_bcm_nat __read_mostly = {
+	.list = LIST_HEAD_INIT(nf_conntrack_helper_bcm_nat.list),
+	.name = "BCM-NAT",
+	.me = THIS_MODULE,
+	.max_expected = 1000,
+	.timeout = 240,
+	.tuple.src.l3num = AF_INET,
+	.tuple.dst.protonum = IPPROTO_UDP,
+	.mask.src.l3num = 0xFFFF,
+	.mask.dst.protonum = 0xFF,
+	.help = bcm_nat_help,
+};
+
+/****************************************************************************/
+static inline int find_exp(u_int32_t ip, u_int16_t port, struct nf_conn *ct)
+{
+	struct nf_conntrack_expect * exp;
+	
+	list_for_each_entry(exp, &nf_conntrack_expect_list, list) {
+		if (exp->tuple.dst.u3.ip == ip &&
+		    exp->tuple.dst.u.all == port &&
+		    exp->tuple.dst.protonum ==
+		    ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.protonum)
+		    	return 1;
+	}
+	return 0;
+}
+
+/****************************************************************************/
+static inline struct nf_conntrack_expect *find_fullcone_exp(struct nf_conn *ct)
+{
+	struct nf_conntrack_expect * exp;
+	struct nf_conntrack_tuple * tp =
+		&ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple;
+
+	list_for_each_entry(exp, &nf_conntrack_expect_list, list) {
+		if (exp->saved_ip == tp->src.u3.ip &&
+		    exp->saved_proto.all == tp->src.u.all &&
+		    exp->tuple.dst.protonum == tp->dst.protonum &&
+		    exp->tuple.src.u3.ip == 0 &&
+		    exp->tuple.src.u.udp.port == 0)
+			return exp;
+	}
+	return NULL;
+}
+#endif /* CONFIG_MIPS_BRCM */
+
 /* FIXME: Multiple targets. --RR */
 static int
 masquerade_check(const char *tablename,
@@ -113,6 +237,60 @@ masquerade_target(struct sk_buff **pskb,
 	ct->nat.masq_index = out->ifindex;
 #endif
 	write_unlock_bh(&masq_lock);
+	
+#if defined(CONFIG_MIPS_BRCM)
+	if (mr->range[0].min_ip != 0 /* nat_mode == full cone */
+	    && nfct_help(ct)->helper == NULL
+	    && ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.protonum ==
+	    IPPROTO_UDP) {
+		unsigned int ret;
+		u_int16_t minport;
+		u_int16_t maxport;
+		struct nf_conntrack_expect *exp;
+
+		DEBUGP("bcm_nat: need full cone NAT\n");
+
+		/* Choose port */
+		read_lock_bh(&nf_conntrack_lock);
+		exp = find_fullcone_exp(ct);
+		if (exp) {
+			minport = maxport = exp->tuple.dst.u.udp.port;
+			DEBUGP("bcm_nat: existing mapped port = %hu\n",
+			       ntohs(minport));
+		} else { /* no previous expect */
+			u_int16_t newport, tmpport;
+			
+			minport = mr->range[0].min.all == 0? 
+				ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.
+				u.udp.port : mr->range[0].min.all;
+			maxport = mr->range[0].max.all == 0? 
+				htons(65535) : mr->range[0].max.all;
+			for (newport = ntohs(minport),tmpport = ntohs(maxport); 
+			     newport <= tmpport; newport++) {
+			     	if (!find_exp(newsrc, htons(newport), ct)) {
+					DEBUGP("bcm_nat: new mapped port = "
+					       "%hu\n", newport);
+					minport = maxport = htons(newport);
+					break;
+				}
+			}
+		}
+		read_unlock_bh(&nf_conntrack_lock);
+
+		newrange = ((struct ip_nat_range)
+			{ mr->range[0].flags | IP_NAT_RANGE_MAP_IPS |
+			  IP_NAT_RANGE_MAP_IPS, newsrc, newsrc,
+			  {.udp = {minport}}, {.udp = {maxport}}});
+	
+		/* Set ct helper */
+		ret = nf_nat_setup_info(ct, &newrange, hooknum);
+		if (ret == NF_ACCEPT) {
+			nfct_help(ct)->helper = &nf_conntrack_helper_bcm_nat;
+			DEBUGP("bcm_nat: helper set\n");
+		}
+		return ret;
+	}
+#endif /* CONFIG_MIPS_BRCM */
 
 	/* Transfer from original range. */
 	newrange = ((struct ip_nat_range)
@@ -219,6 +397,9 @@ static int __init ipt_masquerade_init(vo
 
 static void __exit ipt_masquerade_fini(void)
 {
+#if defined(CONFIG_MIPS_BRCM)
+	nf_conntrack_helper_unregister(&nf_conntrack_helper_bcm_nat);
+#endif
 	xt_unregister_target(&masquerade);
 	unregister_netdevice_notifier(&masq_dev_notifier);
 	unregister_inetaddr_notifier(&masq_inet_notifier);
diff --exclude=.svn -pNur linux-2.6.21.7/net/ipv4/netfilter/Kconfig linux-2.6.21.7/net/ipv4/netfilter/Kconfig
--- linux-2.6.21.7/net/ipv4/netfilter/Kconfig	2007-08-04 18:11:13.000000000 +0200
+++ linux-2.6.21.7/net/ipv4/netfilter/Kconfig	2008-10-13 18:23:39.000000000 +0200
@@ -393,6 +415,12 @@ config NF_NAT_NEEDED
 	depends on NF_NAT
 	default y
 
+config IP_NF_NAT_CACHE
+        tristate "NAT CACHE"
+        depends on IP_NF_NAT
+
+        default m
+
 config IP_NF_TARGET_MASQUERADE
 	tristate "MASQUERADE target support"
 	depends on (NF_NAT || IP_NF_NAT)
@@ -477,6 +505,10 @@ config NF_NAT_PROTO_GRE
 	tristate
 	depends on NF_NAT && NF_CT_PROTO_GRE
 
+config NF_NAT_PROTO_ESP
+	tristate
+	depends on NF_NAT && NF_CT_PROTO_ESP
+
 config IP_NF_NAT_FTP
 	tristate
 	depends on IP_NF_IPTABLES && IP_NF_CONNTRACK && IP_NF_NAT
@@ -554,6 +598,22 @@ config NF_NAT_SIP
 	depends on IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT
 	default NF_NAT && NF_CONNTRACK_SIP
 
+#BRCM begin
+config NF_NAT_PT
+	tristate "Port Triggering support"
+	depends on NF_NAT
+	help
+	  Port Triggering support
+
+	  To compile it as a module, choose M here.  If unsure, say Y.
+
+config NF_NAT_IPSEC
+	tristate "IPSec pass through support"
+	depends on IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT
+   default NF_NAT && NF_CONNTRACK_IPSEC
+	select NF_NAT_PROTO_ESP
+#BRCM end
+
 # mangle + specific targets
 config IP_NF_MANGLE
 	tristate "Packet mangling"
@@ -575,6 +635,17 @@ config IP_NF_TARGET_TOS
 
 	  To compile it as a module, choose M here.  If unsure, say N.
 
+config IP_NF_TARGET_FTOS
+	tristate "FTOS target support"
+	depends on IP_NF_MANGLE
+	help
+	  This option adds a `FTOS' target, which allows you to create rules in
+	  the `mangle' table which alter the Type Of Service field of an IP
+	  packet prior to routing.
+
+	  To compile it as a module, choose M here.  If unsure, say N.
+
+
 config IP_NF_TARGET_ECN
 	tristate "ECN target support"
 	depends on IP_NF_MANGLE
diff --exclude=.svn -pNur linux-2.6.21.7/net/ipv4/netfilter/Makefile linux-2.6.21.7/net/ipv4/netfilter/Makefile
--- linux-2.6.21.7/net/ipv4/netfilter/Makefile	2007-08-04 18:11:13.000000000 +0200
+++ linux-2.6.21.7/net/ipv4/netfilter/Makefile	2008-10-13 18:23:39.000000000 +0200
@@ -68,9 +70,14 @@ obj-$(CONFIG_NF_NAT_PPTP) += nf_nat_pptp
 obj-$(CONFIG_NF_NAT_SIP) += nf_nat_sip.o
 obj-$(CONFIG_NF_NAT_SNMP_BASIC) += nf_nat_snmp_basic.o
 obj-$(CONFIG_NF_NAT_TFTP) += nf_nat_tftp.o
+#BRCM
+obj-$(CONFIG_NF_NAT_PT) += broadcom/nf_nat_pt.o
+obj-$(CONFIG_NF_CONNTRACK_IPSEC) += broadcom/nf_conntrack_ipsec.o
+obj-$(CONFIG_NF_NAT_IPSEC) += broadcom/nf_nat_ipsec.o
 
 # NAT protocols (nf_nat)
 obj-$(CONFIG_NF_NAT_PROTO_GRE) += nf_nat_proto_gre.o
+obj-$(CONFIG_NF_NAT_PROTO_ESP) += nf_nat_proto_esp.o
 
 # generic IP tables 
 obj-$(CONFIG_IP_NF_IPTABLES) += ip_tables.o
@@ -95,6 +102,9 @@ obj-$(CONFIG_IP_NF_MATCH_ADDRTYPE) += ip
 # targets
 obj-$(CONFIG_IP_NF_TARGET_REJECT) += ipt_REJECT.o
 obj-$(CONFIG_IP_NF_TARGET_TOS) += ipt_TOS.o
+# CONFIG_MIPS_BRCM Begin Broadcom changed code.
+obj-$(CONFIG_IP_NF_TARGET_FTOS) += ipt_FTOS.o
+# CONFIG_MIPS_BRCM End Broadcom changed code.
 obj-$(CONFIG_IP_NF_TARGET_ECN) += ipt_ECN.o
 obj-$(CONFIG_IP_NF_TARGET_MASQUERADE) += ipt_MASQUERADE.o
 obj-$(CONFIG_IP_NF_TARGET_REDIRECT) += ipt_REDIRECT.o
