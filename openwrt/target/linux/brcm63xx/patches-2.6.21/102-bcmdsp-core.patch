--- a/init/main.c
+++ b/init/main.c
@@ -117,6 +117,7 @@ EXPORT_SYMBOL(system_state);
 #define MAX_INIT_ARGS CONFIG_INIT_ENV_ARG_LIMIT
 #define MAX_INIT_ENVS CONFIG_INIT_ENV_ARG_LIMIT
 
+extern void __init allocDspModBuffers(void);
 extern void time_init(void);
 /* Default late time init is NULL. archs can override this later. */
 void (*late_time_init)(void);
@@ -600,6 +601,14 @@ asmlinkage void __init start_kernel(void
 #endif
 	vfs_caches_init_early();
 	cpuset_init_early();
+#if defined(CONFIG_MIPS_BRCM)
+	/*
+	** Allocate boot time memory for the special DSP module. This allocation can be 
+	** possible only before mem_init(). Please ensure that this allocation is performed 
+	** before mem_init().
+	*/
+	allocDspModBuffers();
+#endif
 	mem_init();
 	kmem_cache_init();
 	setup_per_cpu_pageset();
--- a/kernel/module.c
+++ b/kernel/module.c
@@ -58,6 +58,15 @@
 /* If this is set, the section belongs in the init part of the module */
 #define INIT_OFFSET_MASK (1UL << (BITS_PER_LONG-1))
 
+#if !defined(CONFIG_BCM96338)
+/*
+** These are pointers to memory chunks allocated for the DSP module. The memory is allocated in
+** start_kernel() during initialization. 
+*/
+extern void *dsp_core;
+extern void *dsp_init;
+#endif
+
 /* Protects module list */
 static DEFINE_SPINLOCK(modlist_lock);
 
@@ -676,6 +685,11 @@ sys_delete_module(const char __user *nam
 		goto out;
 	}
 
+#if !defined(CONFIG_BCM96338)
+    /* This check is not needed for the DSP module */
+    if ( strcmp(mod->name, "dspdd") != 0 )
+#endif
+    {
 	if (!list_empty(&mod->modules_which_use_me)) {
 		/* Other modules depend on us: get rid of them first. */
 		ret = -EWOULDBLOCK;
@@ -713,6 +727,13 @@ sys_delete_module(const char __user *nam
 	/* Never wait if forced. */
 	if (!forced && module_refcount(mod) != 0)
 		wait_for_zero_refcount(mod);
+	}
+#if !defined(CONFIG_BCM96338)
+	else
+	{
+	    ret = 0;
+	}
+#endif
 
 	/* Final destruction now noone is using it. */
 	if (mod->exit != NULL) {
@@ -1210,8 +1231,12 @@ static void free_module(struct module *m
 	/* Module unload stuff */
 	module_unload_free(mod);
 
+#if !defined(CONFIG_BCM96338)
 	/* This may be NULL, but that's OK */
-	module_free(mod, mod->module_init);
+	if ( strcmp(mod->name, "dspdd") != 0 )
+#endif
+	    module_free(mod, mod->module_init);
+
 	kfree(mod->args);
 	if (mod->percpu)
 		percpu_modfree(mod->percpu);
@@ -1219,8 +1244,11 @@ static void free_module(struct module *m
 	/* Free lock-classes: */
 	lockdep_free_key_range(mod->module_core, mod->core_size);
 
+#if defined(CONFIG_BCM96358) || defined(CONFIG_BCM96368) || defined(CONFIG_BCM96816)
 	/* Finally, free the core (containing the module structure) */
-	module_free(mod, mod->module_core);
+	if ( strcmp(mod->name, "dspdd") != 0 )
+#endif
+	    module_free(mod, mod->module_core);
 }
 
 void *__symbol_get(const char *symbol)
@@ -1740,7 +1768,12 @@ static struct module *load_module(void _
 	layout_sections(mod, hdr, sechdrs, secstrings);
 
 	/* Do the allocs. */
+#if !defined(CONFIG_BCM96338)
+	ptr = (strcmp(mod->name, "dspdd") != 0) ? module_alloc(mod->core_size) : dsp_core; 
+#else
 	ptr = module_alloc(mod->core_size);
+#endif
+	      
 	if (!ptr) {
 		err = -ENOMEM;
 		goto free_percpu;
@@ -1748,7 +1781,13 @@ static struct module *load_module(void _
 	memset(ptr, 0, mod->core_size);
 	mod->module_core = ptr;
 
+#if !defined(CONFIG_BCM96338)
+	ptr = (strcmp(mod->name, "dspdd") != 0) ? module_alloc(mod->init_size) : dsp_init; 
+#else	      
 	ptr = module_alloc(mod->init_size);
+#endif
+	      
+
 	if (!ptr && mod->init_size) {
 		err = -ENOMEM;
 		goto free_core;
@@ -1942,8 +1981,17 @@ static struct module *load_module(void _
 	module_arch_cleanup(mod);
  cleanup:
 	module_unload_free(mod);
+
+#if !defined(CONFIG_BCM96338)
+    /* Only if not the dsp module */
+    if ( strcmp(mod->name, "dspdd") != 0 )
+#endif
 	module_free(mod, mod->module_init);
  free_core:
+#if !defined(CONFIG_BCM96338)
+    /* Only if not the dsp module */
+    if ( strcmp(mod->name, "dspdd") != 0 )
+#endif
 	module_free(mod, mod->module_core);
  free_percpu:
 	if (percpu)
@@ -2031,10 +2079,16 @@ sys_init_module(void __user *umod,
 	/* Drop initial reference. */
 	module_put(mod);
 	unwind_remove_table(mod->unwind_info, 1);
-	module_free(mod, mod->module_init);
+#if !defined(CONFIG_BOUNCE)
+#if !defined(CONFIG_BCM96338)
+    /* Only if not the dsp module */
+	if ( strcmp(mod->name, "dspdd") != 0 )
+#endif
+	    module_free(mod, mod->module_init);
 	mod->module_init = NULL;
 	mod->init_size = 0;
 	mod->init_text_size = 0;
+#endif	/* !defined(CONFIG_BOUNCE) */
 	mutex_unlock(&module_mutex);
 
 	return 0;
@@ -2240,7 +2294,11 @@ static int m_show(struct seq_file *m, vo
 		   mod->state == MODULE_STATE_COMING ? "Loading":
 		   "Live");
 	/* Used by oprofile and other similar tools. */
+#if !defined(CONFIG_BOUNCE)
 	seq_printf(m, " 0x%p", mod->module_core);
+#else
+	seq_printf(m, " 0x%p 0x%p", mod->module_core, mod->module_init );
+#endif
 
 	/* Taints info */
 	if (mod->taints)
