--- a/drivers/net/bcmxtmrt.c
+++ b/drivers/net/bcmxtmrt.c
@@ -57,7 +57,7 @@
 #include <bcmtypes.h>
 #include <bcm_map_part.h>
 #include <bcm_intr.h>
-#include <board.h>
+#include <bcm-api.h>
 #include "bcmnet.h"
 #include "bcmxtmcfg.h"
 #include "bcmxtmrt.h"
@@ -71,7 +71,6 @@ static UINT32 gs_ulLogPorts[]  = {0, 3,
 
 /* Externs. */
 extern unsigned long getMemorySize(void);
-extern int kerSysGetMacAddress(UINT8 *pucaMacAddr, UINT32 ulId);
 
 /* Prototypes. */
 int __init bcmxtmrt_init( void );
@@ -134,6 +133,7 @@ static int bcmxtmrt_del_proc_files( void
 static int ProcDmaTxInfo(char *page, char **start, off_t off, int cnt, 
     int *eof, void *data);
 
+extern int board_get_mac_address(u8 * mac, unsigned off);
 
 /* Globals. */
 BCMXTMRT_GLOBAL_INFO g_GlobalInfo;
@@ -163,8 +163,9 @@ static const struct net_device_ops bcmXt
     .ndo_stop           = bcmxtmrt_close,
     .ndo_start_xmit     = (HardStartXmitFuncP)bcmxtmrt_xmit,
     .ndo_do_ioctl       = bcmxtmrt_ioctl,
+    .ndo_set_mac_address= eth_mac_addr,
     .ndo_tx_timeout     = bcmxtmrt_timeout,
-    .ndo_get_stats      = bcmxtmrt_query
+    .ndo_get_stats      = bcmxtmrt_query,
  };
 #endif
 
@@ -938,10 +939,12 @@ static int bcmxtmrt_xmit( pNBuff_t pNBuf
                     len = ETH_ZLEN;
                 }
 
+#ifndef CONFIG_BOARD_NEUFBOX6
                 if ((pGi->bondConfig.sConfig.ptmBond == BC_PTM_BONDING_ENABLE)
                     &&
                     (ulHdrType == HT_PTM))
                   bcmxtmrt_ptmbond_add_hdr (pDevCtx, &pNBuff, &pNBuffSkb, &pData, &len) ;
+#endif
 
                 nbuff_flush(pNBuff, pData, len);
 
@@ -1300,7 +1303,7 @@ static irqreturn_t bcmxtmrt_rxisr(int nI
     {
         /* Device is not open.  Reenable interrupt. */
         ((volatile DmaChannelCfg *) pRxDma)->intStat = DMA_BUFF_DONE;
-        BcmHalInterruptEnable(SAR_RX_INT_ID_BASE + (((UINT32)pRxDma -
+        enable_brcm_irq(SAR_RX_INT_ID_BASE + (((UINT32)pRxDma -
             (UINT32)pGi->pRxDmaBase) / sizeof(DmaChannelCfg)));
     }
 
@@ -1358,7 +1361,7 @@ static int bcmxtmrt_poll_napi(struct nap
     if( pGi->ulDrvState == XTMRT_RUNNING )
         for( i = 0; ulMask && i < MAX_RECEIVE_QUEUES; i++, ulMask >>= 1 )
             if( (ulMask & 0x01) == 0x01 )
-                BcmHalInterruptEnable(SAR_RX_INT_ID_BASE + i);
+                enable_brcm_irq(SAR_RX_INT_ID_BASE + i);
 
     return work_done;
 }
@@ -1405,7 +1408,7 @@ static int bcmxtmrt_poll(struct net_devi
     if( pGi->ulDrvState == XTMRT_RUNNING )
         for( i = 0; ulMask && i < MAX_RECEIVE_QUEUES; i++, ulMask >>= 1 )
             if( (ulMask & 0x01) == 0x01 )
-                BcmHalInterruptEnable(SAR_RX_INT_ID_BASE + i);
+                enable_brcm_irq(SAR_RX_INT_ID_BASE + i);
 
     return 0;
 } /* bcmxtmrt_poll */
@@ -1543,6 +1546,7 @@ static UINT32 bcmxtmrt_rxtask( UINT32 ul
                 pFkb = fkb_qinit (pBuf, RXBUF_HEAD_RESERVE, pucData, usLength,
                                   (uint32_t)pRxBdInfo) ;
 
+#ifndef CONFIG_BOARD_NEUFBOX6
                 if ((pGi->bondConfig.sConfig.ptmBond == BC_PTM_BONDING_ENABLE)
                       &&
                     (pDevCtx->ulHdrType == HT_PTM)) {
@@ -1551,7 +1555,9 @@ static UINT32 bcmxtmrt_rxtask( UINT32 ul
                     bcmxtmrt_ptmbond_receive_rx_fragment (pDevCtx, pFkb, dmaDesc.status) ;
                     spin_unlock_bh (&pGi->xtmlock_rx_bond) ;
                 }
-                else {
+                else
+#endif
+		{
                     bcmxtmrt_process_rx_pkt (pDevCtx, pFkb, dmaDesc.status, delLen, trailerDelLen) ;
                     //bcmxtmrt_ptm_receive_and_drop (pDevCtx, pFkb, dmaDesc.status) ; 
                                          /* Used for SAR-phy Lpbk high-rate test */
@@ -1851,6 +1857,7 @@ static void bcmxtmrt_timer( PBCMXTMRT_GL
         if( pGi->pDevCtxs[i] )
             bcmxtmrt_xmit( PNBUFF_NULL, pGi->pDevCtxs[i]->pDev );
 
+#ifndef CONFIG_BOARD_NEUFBOX6
     if (pGi->bondConfig.sConfig.ptmBond == BC_PTM_BONDING_ENABLE) {
        if (pGi->ptmBondInfo.tickCount >= MAX_TICK_COUNT) {
           spin_lock_bh(&pGi->xtmlock_rx_bond);
@@ -1861,6 +1868,7 @@ static void bcmxtmrt_timer( PBCMXTMRT_GL
        else
           pGi->ptmBondInfo.tickCount++ ;
     }
+#endif
 
     /* Restart the timer. */
     pGi->Timer.expires = jiffies + SAR_TIMEOUT;
@@ -2052,10 +2060,12 @@ static int DoGlobInitReq( PXTMRT_GLOBAL_
     }
 
     pGi->bondConfig.uConfig = pGip->bondConfig.uConfig ;
+#ifndef CONFIG_BOARD_NEUFBOX6
     if (pGi->bondConfig.sConfig.ptmBond == BC_PTM_BONDING_ENABLE) {
        bcmxtmrt_ptmbond_initialize (PTM_BOND_INITIALIZE_GLOBAL) ;
        spin_lock_init(&pGi->xtmlock_rx_bond);
     }
+#endif
     /* Initialize receive DMA registers. */
     if( nRet == 0 )
     {
@@ -2074,7 +2084,7 @@ static int DoGlobInitReq( PXTMRT_GLOBAL_
         for(i=0, pRxDma=pGi->pRxDmaBase; i < MAX_RECEIVE_QUEUES; i++, pRxDma++)
         {
             pRxDma->cfg = 0;
-            BcmHalInterruptDisable(SAR_RX_INT_ID_BASE + i);
+            disable_brcm_irq(SAR_RX_INT_ID_BASE + i);
             if( pGip->ulReceiveQueueSizes[i] )
             {
                 PRXBDINFO pRxBdInfo = &pGi->RxBdInfos[i];
@@ -2091,8 +2101,8 @@ static int DoGlobInitReq( PXTMRT_GLOBAL_
                 pBd += pGip->ulReceiveQueueSizes[i] - 1;
                 pBd++->status |= DMA_WRAP;
 
-                BcmHalMapInterrupt((FN_HANDLER) bcmxtmrt_rxisr, (UINT32)
-                    pRxDma, SAR_RX_INT_ID_BASE + i);
+		if (request_irq(SAR_RX_INT_ID_BASE + i, bcmxtmrt_rxisr, IRQF_DISABLED | IRQF_SAMPLE_RANDOM, "xtmrt", pRxDma) < 0)
+			return -EINVAL;
             }
             else
                 memset(&pGi->RxBdInfos[i], 0x00, sizeof(RXBDINFO));
@@ -2108,7 +2118,7 @@ static int DoGlobInitReq( PXTMRT_GLOBAL_
         for(i=0, pTxDma=pGi->pTxDmaBase; i < MAX_TRANSMIT_QUEUES; i++, pTxDma++)
         {
             pTxDma->cfg = 0;
-            BcmHalInterruptDisable(SAR_TX_INT_ID_BASE + i);
+            disable_brcm_irq(SAR_TX_INT_ID_BASE + i);
         }
 
         /* Initialize a timer function to free transmit buffers. */
@@ -2143,7 +2153,7 @@ static int DoGlobUninitReq( void )
         pGi->ulDrvState = XTMRT_UNINITIALIZED;
 
         for( i = 0; i < MAX_RECEIVE_QUEUES; i++ )
-            BcmHalInterruptDisable(SAR_RX_INT_ID_BASE + i);
+            disable_brcm_irq(SAR_RX_INT_ID_BASE + i);
         del_timer_sync(&pGi->Timer);
 
         for (i = 0; i < MAX_BUFMEM_BLOCKS; i++)
@@ -2182,7 +2192,6 @@ static int DoCreateDeviceReq( PXTMRT_CRE
          pCnd->szNetworkDeviceName, ether_setup )) != NULL )
     {
         dev_alloc_name(dev, dev->name);
-        SET_MODULE_OWNER(dev);
 
  #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,30)
         pDevCtx = (PBCMXTMRT_DEV_CONTEXT) netdev_priv(dev);
@@ -2215,7 +2224,7 @@ static int DoCreateDeviceReq( PXTMRT_CRE
         /* set unit number to bit 20-27 */
         macId |= ((unit & 0xff) << 20);
 
-        kerSysGetMacAddress(dev->dev_addr, macId);
+	board_get_mac_address(dev->dev_addr, macId);
 
         if( (dev->dev_addr[0] & 0x01) == 0x01 )
         {
@@ -2293,9 +2302,7 @@ static int DoCreateDeviceReq( PXTMRT_CRE
         netif_napi_add(dev, &pDevCtx->napi, bcmxtmrt_poll_napi, 64);
 #endif      
         /* Don't reset or enable the device yet. "Open" does that. */
-        printk("[%s.%d]: register_netdev\n", __func__, __LINE__);
         nRet = register_netdev(dev);
-        printk("[%s.%d]: register_netdev done\n", __func__, __LINE__);
         if (nRet == 0) 
         {
             UINT32 i;
@@ -2439,6 +2446,7 @@ static int DoLinkStsChangedReq( PBCMXTMR
          }
       }
 
+#ifndef CONFIG_BOARD_NEUFBOX6
       if (pGi->bondConfig.sConfig.ptmBond == BC_PTM_BONDING_ENABLE) {
          spin_lock (&pGi->xtmlock_tx) ;
          //pGi->ptmBondInfo.lastTxPktSz = 0 ;
@@ -2449,6 +2457,7 @@ static int DoLinkStsChangedReq( PBCMXTMR
                                                      pDevCtx->ulPortDataMask) ;
          spin_unlock (&pGi->xtmlock_rx_bond) ;
       }
+#endif
    }
    else
    {
@@ -2518,7 +2527,7 @@ static int DoLinkUp( PBCMXTMRT_DEV_CONTE
              {
                 if( pGi->RxBdInfos[i].pBdBase )
                 {
-                   BcmHalInterruptEnable(SAR_RX_INT_ID_BASE + i);
+                   enable_brcm_irq(SAR_RX_INT_ID_BASE + i);
                    pRxDma->cfg = DMA_ENABLE;
                 }
              }
@@ -2607,7 +2616,7 @@ static int DoLinkDownRx( UINT32 ulPortId
 
                 /* Reinitialize the receive DMA. */
                 pRxDma->intStat = DMA_DONE | DMA_NO_DESC | DMA_BUFF_DONE;
-                BcmHalInterruptDisable(SAR_RX_INT_ID_BASE + i);
+                disable_brcm_irq(SAR_RX_INT_ID_BASE + i);
 
                 pRxBdInfo->pBdHead = pRxBdInfo->pBdTail = pRxBdInfo->pBdBase;
                 pStRam = pGi->pDmaRegs->stram.s;
@@ -2991,8 +3000,6 @@ static int DoDeleteDeviceReq( PBCMXTMRT_
         {
             pGi->pDevCtxs[i] = NULL;
 
-            kerSysReleaseMacAddress( pDevCtx->pDev->dev_addr );
-
             unregister_netdev( pDevCtx->pDev );
             free_netdev( pDevCtx->pDev );
 
@@ -3055,9 +3062,11 @@ static int bcmxtmrt_add_proc_files( void
     proc_mkdir ("driver/xtm", NULL);
     create_proc_read_entry("driver/xtm/txdmainfo", 0, NULL, ProcDmaTxInfo, 0);
 
+#ifndef CONFIG_BOARD_NEUFBOX6
     create_proc_read_entry("driver/xtm/rxbondctrs", 0, NULL, ProcRxBondCtrs, 0);
 
     create_proc_read_entry("driver/xtm/txbondinfo", 0, NULL, ProcTxBondInfo, 0);
+#endif
 
 #ifdef PTM_BONDING_DEBUG
     create_proc_read_entry("driver/xtm/rxbondseq0", 0, NULL, ProcRxBondSeq0, 0);
